
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006164  08006164  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800616c  0800616c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000003d4  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000046c  2000046c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133ba  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003840  00000000  00000000  00033482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00036cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001040  00000000  00000000  00037eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fb9  00000000  00000000  00038ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169e1  00000000  00000000  0005eea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daddb  00000000  00000000  0007588a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150665  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bfc  00000000  00000000  001506b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005dc0 	.word	0x08005dc0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	08005dc0 	.word	0x08005dc0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <getVersions>:
uint32_t firstBootFlagAddress2 = CONFIG_2_ADDRESS + 4;
uint32_t notValidFlagAddress2 = CONFIG_2_ADDRESS + 8;
uint32_t versionAddress2 = CONFIG_2_ADDRESS + 12;

static char versionBuf[128];
char* getVersions() { //TODO
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	uint32_t ver1 = FlashReadWord(versionAddress1);
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <getVersions+0x74>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fc12 	bl	8000df8 <FlashReadWord>
 80005d4:	6078      	str	r0, [r7, #4]
	uint32_t ver2 = FlashReadWord(versionAddress2);
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <getVersions+0x78>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fc0c 	bl	8000df8 <FlashReadWord>
 80005e0:	6038      	str	r0, [r7, #0]
	if (ver1 == EMPTY && ver2 == EMPTY) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d105      	bne.n	80005f6 <getVersions+0x32>
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f0:	d101      	bne.n	80005f6 <getVersions+0x32>
		return "No applications in flash\n";
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <getVersions+0x7c>)
 80005f4:	e01c      	b.n	8000630 <getVersions+0x6c>
	} else if (ver1 == EMPTY) {
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fc:	d106      	bne.n	800060c <getVersions+0x48>
		sprintf(versionBuf, "App 1 version: none\nApp 2 version: %"PRIu32"\n", ver2);
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	4910      	ldr	r1, [pc, #64]	; (8000644 <getVersions+0x80>)
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <getVersions+0x84>)
 8000604:	f004 ffda 	bl	80055bc <siprintf>
		return versionBuf;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <getVersions+0x84>)
 800060a:	e011      	b.n	8000630 <getVersions+0x6c>
	} else if (ver2 == EMPTY) {
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000612:	d106      	bne.n	8000622 <getVersions+0x5e>
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: none\n", ver1);
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <getVersions+0x88>)
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <getVersions+0x84>)
 800061a:	f004 ffcf 	bl	80055bc <siprintf>
		return versionBuf;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <getVersions+0x84>)
 8000620:	e006      	b.n	8000630 <getVersions+0x6c>
	} else {
		sprintf(versionBuf, "App 1 version: %"PRIu32"\nApp 2 version: %"PRIu32"\n", ver1, ver2);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	490a      	ldr	r1, [pc, #40]	; (8000650 <getVersions+0x8c>)
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <getVersions+0x84>)
 800062a:	f004 ffc7 	bl	80055bc <siprintf>
		return versionBuf;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <getVersions+0x84>)
	}
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000000c 	.word	0x2000000c
 800063c:	2000001c 	.word	0x2000001c
 8000640:	08005dd8 	.word	0x08005dd8
 8000644:	08005df4 	.word	0x08005df4
 8000648:	200000b4 	.word	0x200000b4
 800064c:	08005e1c 	.word	0x08005e1c
 8000650:	08005e44 	.word	0x08005e44

08000654 <getLatestApplicationAddress>:

uint32_t getLatestApplicationAddress() {
 8000654:	b598      	push	{r3, r4, r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if (FlashReadWord(seqAddress1) < FlashReadWord(seqAddress2)) {
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <getLatestApplicationAddress+0x4c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fbcb 	bl	8000df8 <FlashReadWord>
 8000662:	4604      	mov	r4, r0
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <getLatestApplicationAddress+0x50>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fbc5 	bl	8000df8 <FlashReadWord>
 800066e:	4603      	mov	r3, r0
 8000670:	429c      	cmp	r4, r3
 8000672:	d201      	bcs.n	8000678 <getLatestApplicationAddress+0x24>
		return APP_1_ADDRESS;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <getLatestApplicationAddress+0x54>)
 8000676:	e010      	b.n	800069a <getLatestApplicationAddress+0x46>
	} else if (FlashReadWord(seqAddress2) < FlashReadWord(seqAddress1)) {
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <getLatestApplicationAddress+0x50>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fbbb 	bl	8000df8 <FlashReadWord>
 8000682:	4604      	mov	r4, r0
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <getLatestApplicationAddress+0x4c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fbb5 	bl	8000df8 <FlashReadWord>
 800068e:	4603      	mov	r3, r0
 8000690:	429c      	cmp	r4, r3
 8000692:	d201      	bcs.n	8000698 <getLatestApplicationAddress+0x44>
		return APP_2_ADDRESS;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <getLatestApplicationAddress+0x58>)
 8000696:	e000      	b.n	800069a <getLatestApplicationAddress+0x46>
	} else {
		return 0;
 8000698:	2300      	movs	r3, #0
	}
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd98      	pop	{r3, r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000010 	.word	0x20000010
 80006a8:	0800c000 	.word	0x0800c000
 80006ac:	08104000 	.word	0x08104000

080006b0 <updateConfig>:

void updateConfig() {
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 80006b6:	f7ff ffcd 	bl	8000654 <getLatestApplicationAddress>
 80006ba:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a21      	ldr	r2, [pc, #132]	; (8000744 <updateConfig+0x94>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d11d      	bne.n	8000700 <updateConfig+0x50>
		EraseSector(CONFIG_2_SECTOR);
 80006c4:	200c      	movs	r0, #12
 80006c6:	f000 fba3 	bl	8000e10 <EraseSector>
		FlashWriteWord(seqAddress2, FlashReadWord(seqAddress1) - 1);
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <updateConfig+0x98>)
 80006cc:	681c      	ldr	r4, [r3, #0]
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <updateConfig+0x9c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fb90 	bl	8000df8 <FlashReadWord>
 80006d8:	4603      	mov	r3, r0
 80006da:	3b01      	subs	r3, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	4620      	mov	r0, r4
 80006e0:	f000 fb6b 	bl	8000dba <FlashWriteWord>
		//FlashWriteWord(firstBootFlagAddress2, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress2, 0xFFFF); // FFFF - not valid (default)
		FlashWriteWord(versionAddress2, FlashReadWord(versionAddress1) + 1);
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <updateConfig+0xa0>)
 80006e6:	681c      	ldr	r4, [r3, #0]
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <updateConfig+0xa4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fb83 	bl	8000df8 <FlashReadWord>
 80006f2:	4603      	mov	r3, r0
 80006f4:	3301      	adds	r3, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	4620      	mov	r0, r4
 80006fa:	f000 fb5e 	bl	8000dba <FlashWriteWord>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
		//FlashWriteWord(firstBootFlagAddress1, 0xFFFF); // FFFF - first boot (default)
		//FlashWriteWord(notValidFlagAddress1, 0xFFFF); // FFFF - not valid (default)
		FlashWriteWord(versionAddress1, FlashReadWord(versionAddress2) + 1);
	}
}
 80006fe:	e01c      	b.n	800073a <updateConfig+0x8a>
		EraseSector(CONFIG_1_SECTOR);
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fb85 	bl	8000e10 <EraseSector>
		FlashWriteWord(seqAddress1, FlashReadWord(seqAddress2) - 1);
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <updateConfig+0x9c>)
 8000708:	681c      	ldr	r4, [r3, #0]
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <updateConfig+0x98>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fb72 	bl	8000df8 <FlashReadWord>
 8000714:	4603      	mov	r3, r0
 8000716:	3b01      	subs	r3, #1
 8000718:	4619      	mov	r1, r3
 800071a:	4620      	mov	r0, r4
 800071c:	f000 fb4d 	bl	8000dba <FlashWriteWord>
		FlashWriteWord(versionAddress1, FlashReadWord(versionAddress2) + 1);
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <updateConfig+0xa4>)
 8000722:	681c      	ldr	r4, [r3, #0]
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <updateConfig+0xa0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fb65 	bl	8000df8 <FlashReadWord>
 800072e:	4603      	mov	r3, r0
 8000730:	3301      	adds	r3, #1
 8000732:	4619      	mov	r1, r3
 8000734:	4620      	mov	r0, r4
 8000736:	f000 fb40 	bl	8000dba <FlashWriteWord>
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bd90      	pop	{r4, r7, pc}
 8000742:	bf00      	nop
 8000744:	0800c000 	.word	0x0800c000
 8000748:	20000010 	.word	0x20000010
 800074c:	20000000 	.word	0x20000000
 8000750:	2000001c 	.word	0x2000001c
 8000754:	2000000c 	.word	0x2000000c

08000758 <rollbackConfig>:

void rollbackConfig() {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 800075e:	f7ff ff79 	bl	8000654 <getLatestApplicationAddress>
 8000762:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_1_ADDRESS)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a09      	ldr	r2, [pc, #36]	; (800078c <rollbackConfig+0x34>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d103      	bne.n	8000774 <rollbackConfig+0x1c>
		EraseSector(CONFIG_1_SECTOR);
 800076c:	2002      	movs	r0, #2
 800076e:	f000 fb4f 	bl	8000e10 <EraseSector>
	else if (latestAppAddress == APP_2_ADDRESS)
		EraseSector(CONFIG_2_SECTOR);
}
 8000772:	e006      	b.n	8000782 <rollbackConfig+0x2a>
	else if (latestAppAddress == APP_2_ADDRESS)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a06      	ldr	r2, [pc, #24]	; (8000790 <rollbackConfig+0x38>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d102      	bne.n	8000782 <rollbackConfig+0x2a>
		EraseSector(CONFIG_2_SECTOR);
 800077c:	200c      	movs	r0, #12
 800077e:	f000 fb47 	bl	8000e10 <EraseSector>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	0800c000 	.word	0x0800c000
 8000790:	08104000 	.word	0x08104000

08000794 <validateApplications>:

void validateApplications() {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
	uint32_t nValid1 = FlashReadWord(notValidFlagAddress1);
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <validateApplications+0x68>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fb2a 	bl	8000df8 <FlashReadWord>
 80007a4:	60f8      	str	r0, [r7, #12]
	uint32_t firstBoot1 = FlashReadWord(firstBootFlagAddress1);
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <validateApplications+0x6c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fb24 	bl	8000df8 <FlashReadWord>
 80007b0:	60b8      	str	r0, [r7, #8]
	uint32_t nValid2 = FlashReadWord(notValidFlagAddress2);
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <validateApplications+0x70>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fb1e 	bl	8000df8 <FlashReadWord>
 80007bc:	6078      	str	r0, [r7, #4]
	uint32_t firstBoot2 = FlashReadWord(firstBootFlagAddress2);
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <validateApplications+0x74>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fb18 	bl	8000df8 <FlashReadWord>
 80007c8:	6038      	str	r0, [r7, #0]
	if (nValid1 == EMPTY && firstBoot1 == 0)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d0:	d105      	bne.n	80007de <validateApplications+0x4a>
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <validateApplications+0x4a>
		EraseSector(CONFIG_1_SECTOR);
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 fb19 	bl	8000e10 <EraseSector>
	if (nValid2 == EMPTY && firstBoot2 == 0)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e4:	d105      	bne.n	80007f2 <validateApplications+0x5e>
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <validateApplications+0x5e>
		EraseSector(CONFIG_2_SECTOR);
 80007ec:	200c      	movs	r0, #12
 80007ee:	f000 fb0f 	bl	8000e10 <EraseSector>
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004
 8000804:	20000018 	.word	0x20000018
 8000808:	20000014 	.word	0x20000014

0800080c <jumpToApp>:

void jumpToApp() {
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
	  uint32_t address = getLatestApplicationAddress();
 8000812:	f7ff ff1f 	bl	8000654 <getLatestApplicationAddress>
 8000816:	6178      	str	r0, [r7, #20]
	  if (address == APP_1_ADDRESS)
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	4a30      	ldr	r2, [pc, #192]	; (80008dc <jumpToApp+0xd0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d106      	bne.n	800082e <jumpToApp+0x22>
		  FlashWriteWord(firstBootFlagAddress1, 0);
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <jumpToApp+0xd4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fac7 	bl	8000dba <FlashWriteWord>
 800082c:	e009      	b.n	8000842 <jumpToApp+0x36>
	  else if (address == APP_2_ADDRESS)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <jumpToApp+0xd8>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d14e      	bne.n	80008d4 <jumpToApp+0xc8>
		  FlashWriteWord(firstBootFlagAddress2, 0);
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <jumpToApp+0xdc>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fabc 	bl	8000dba <FlashWriteWord>
	  else return;

	  void(*app_reset_handler)();

	  //shut down any tasks remaining
	  HAL_TIM_Base_Stop_IT(&htim6);
 8000842:	482a      	ldr	r0, [pc, #168]	; (80008ec <jumpToApp+0xe0>)
 8000844:	f003 fa62 	bl	8003d0c <HAL_TIM_Base_Stop_IT>
	  uartDisableInterruption();
 8000848:	f001 fa08 	bl	8001c5c <uartDisableInterruption>

	  __HAL_RCC_GPIOC_CLK_DISABLE();
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <jumpToApp+0xe4>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	4a27      	ldr	r2, [pc, #156]	; (80008f0 <jumpToApp+0xe4>)
 8000852:	f023 0304 	bic.w	r3, r3, #4
 8000856:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <jumpToApp+0xe4>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085c:	4a24      	ldr	r2, [pc, #144]	; (80008f0 <jumpToApp+0xe4>)
 800085e:	f023 0308 	bic.w	r3, r3, #8
 8000862:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <jumpToApp+0xe4>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <jumpToApp+0xe4>)
 800086a:	f023 0302 	bic.w	r3, r3, #2
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <jumpToApp+0xe4>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000874:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <jumpToApp+0xe4>)
 8000876:	f023 0301 	bic.w	r3, r3, #1
 800087a:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_RCC_DeInit();// to turn off the PLL and set the clock to it's default state
 800087c:	f003 f88e 	bl	800399c <HAL_RCC_DeInit>
	  HAL_DeInit();// to disable all the peripherals
 8000880:	f001 fce8 	bl	8002254 <HAL_DeInit>

	  SysTick->CTRL = 0;//to turn off the systick
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <jumpToApp+0xe8>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <jumpToApp+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <jumpToApp+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	2301      	movs	r3, #1
 8000898:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	f383 8810 	msr	PRIMASK, r3
}
 80008a0:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80008a2:	b672      	cpsid	i
}
 80008a4:	bf00      	nop
	  //disable interrupts
	  __set_PRIMASK(1);
	  __disable_irq();

	  //__DMB(); // Data Memory Barrier to ensure write to memory is completed
	  SCB->VTOR = address;//change this
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <jumpToApp+0xec>)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	6093      	str	r3, [r2, #8]
      //__DSB(); // Data Synchronization Barrier to ensure all subsequence instructions use the new configuation

	  //configure the MSP by reading the value from the base address
	  uint32_t msp_value = *(__IO uint32_t*) address;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f383 8808 	msr	MSP, r3
}
 80008bc:	bf00      	nop

	  __set_MSP(msp_value);

	  uint32_t resethandler_address = *(__IO uint32_t*) (address + 4);
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3304      	adds	r3, #4
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]

	  app_reset_handler = (void (*)(void)) (resethandler_address);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80008ca:	b662      	cpsie	i
}
 80008cc:	bf00      	nop

	  //jump to reset handler of the user app.
	  __enable_irq();
	  app_reset_handler();
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4798      	blx	r3
 80008d2:	e000      	b.n	80008d6 <jumpToApp+0xca>
	  else return;
 80008d4:	bf00      	nop
}
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	0800c000 	.word	0x0800c000
 80008e0:	20000004 	.word	0x20000004
 80008e4:	08104000 	.word	0x08104000
 80008e8:	20000014 	.word	0x20000014
 80008ec:	20000214 	.word	0x20000214
 80008f0:	40023800 	.word	0x40023800
 80008f4:	e000e010 	.word	0xe000e010
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <eraseLogicalBank1>:

void eraseLogicalBank1() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	EraseSector(FLASH_SECTOR_3);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 fa85 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_4);
 8000906:	2004      	movs	r0, #4
 8000908:	f000 fa82 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_5);
 800090c:	2005      	movs	r0, #5
 800090e:	f000 fa7f 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_6);
 8000912:	2006      	movs	r0, #6
 8000914:	f000 fa7c 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_7);
 8000918:	2007      	movs	r0, #7
 800091a:	f000 fa79 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_8);
 800091e:	2008      	movs	r0, #8
 8000920:	f000 fa76 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_9);
 8000924:	2009      	movs	r0, #9
 8000926:	f000 fa73 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_10);
 800092a:	200a      	movs	r0, #10
 800092c:	f000 fa70 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_11);
 8000930:	200b      	movs	r0, #11
 8000932:	f000 fa6d 	bl	8000e10 <EraseSector>
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}

0800093a <eraseLogicalBank2>:

void eraseLogicalBank2() {
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
	EraseSector(FLASH_SECTOR_13);
 800093e:	200d      	movs	r0, #13
 8000940:	f000 fa66 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_14);
 8000944:	200e      	movs	r0, #14
 8000946:	f000 fa63 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_15);
 800094a:	200f      	movs	r0, #15
 800094c:	f000 fa60 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_16);
 8000950:	2010      	movs	r0, #16
 8000952:	f000 fa5d 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_17);
 8000956:	2011      	movs	r0, #17
 8000958:	f000 fa5a 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_18);
 800095c:	2012      	movs	r0, #18
 800095e:	f000 fa57 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_19);
 8000962:	2013      	movs	r0, #19
 8000964:	f000 fa54 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_20);
 8000968:	2014      	movs	r0, #20
 800096a:	f000 fa51 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_21);
 800096e:	2015      	movs	r0, #21
 8000970:	f000 fa4e 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_22);
 8000974:	2016      	movs	r0, #22
 8000976:	f000 fa4b 	bl	8000e10 <EraseSector>
	EraseSector(FLASH_SECTOR_23);
 800097a:	2017      	movs	r0, #23
 800097c:	f000 fa48 	bl	8000e10 <EraseSector>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <eraseLogicalBank>:

void eraseLogicalBank() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	uint32_t latestAppAddress = getLatestApplicationAddress();
 800098a:	f7ff fe63 	bl	8000654 <getLatestApplicationAddress>
 800098e:	6078      	str	r0, [r7, #4]
	if (latestAppAddress == APP_2_ADDRESS) eraseLogicalBank2();
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a06      	ldr	r2, [pc, #24]	; (80009ac <eraseLogicalBank+0x28>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d102      	bne.n	800099e <eraseLogicalBank+0x1a>
 8000998:	f7ff ffcf 	bl	800093a <eraseLogicalBank2>
	else eraseLogicalBank1();
}
 800099c:	e001      	b.n	80009a2 <eraseLogicalBank+0x1e>
	else eraseLogicalBank1();
 800099e:	f7ff ffad 	bl	80008fc <eraseLogicalBank1>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08104000 	.word	0x08104000

080009b0 <bufferCreate>:
    uint16_t size;
    uint16_t capacity;
    uint8_t *data;
};

Buffer * bufferCreate(const uint16_t capacity) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	80fb      	strh	r3, [r7, #6]
    Buffer * const buffer = (Buffer *) malloc(sizeof(Buffer));
 80009ba:	200c      	movs	r0, #12
 80009bc:	f004 fcfe 	bl	80053bc <malloc>
 80009c0:	4603      	mov	r3, r0
 80009c2:	60fb      	str	r3, [r7, #12]
    buffer->data = (uint8_t *) malloc(sizeof(uint8_t) * capacity);
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f004 fcf8 	bl	80053bc <malloc>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	609a      	str	r2, [r3, #8]
    buffer->capacity = capacity;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	80da      	strh	r2, [r3, #6]
    bufferClear(buffer);
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f000 f886 	bl	8000aec <bufferClear>
    return buffer;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <bufferPush>:

uint8_t bufferPush(Buffer * const buffer, const uint8_t value) {
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	70fb      	strb	r3, [r7, #3]
    if (buffer->size < buffer->capacity) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	889a      	ldrh	r2, [r3, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	88db      	ldrh	r3, [r3, #6]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d21f      	bcs.n	8000a42 <bufferPush+0x58>
        disableInt();
 8000a02:	f000 f8e7 	bl	8000bd4 <disableInt>

        buffer->data[buffer->ptrIn] = value;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	8812      	ldrh	r2, [r2, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	78fa      	ldrb	r2, [r7, #3]
 8000a12:	701a      	strb	r2, [r3, #0]
        buffer->ptrIn = (buffer->ptrIn + 1) % buffer->capacity;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	88d2      	ldrh	r2, [r2, #6]
 8000a1e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a22:	fb01 f202 	mul.w	r2, r1, r2
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	801a      	strh	r2, [r3, #0]
        buffer->size++;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	889b      	ldrh	r3, [r3, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	809a      	strh	r2, [r3, #4]

        enableInt();
 8000a3a:	f000 f8df 	bl	8000bfc <enableInt>
        return 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <bufferPush+0x5a>
    } else
        return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <bufferPushValues>:

uint16_t bufferPushValues(Buffer * const buffer, const uint8_t * const values, const uint16_t size) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	4613      	mov	r3, r2
 8000a58:	80fb      	strh	r3, [r7, #6]
    uint16_t pushed;
    for (pushed = 0; pushed < size; pushed++) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	82fb      	strh	r3, [r7, #22]
 8000a5e:	e00f      	b.n	8000a80 <bufferPushValues+0x34>
        if (!bufferPush(buffer, values[pushed]))
 8000a60:	8afb      	ldrh	r3, [r7, #22]
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff ffbd 	bl	80009ea <bufferPush>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <bufferPushValues+0x2e>
            return pushed;
 8000a76:	8afb      	ldrh	r3, [r7, #22]
 8000a78:	e007      	b.n	8000a8a <bufferPushValues+0x3e>
    for (pushed = 0; pushed < size; pushed++) {
 8000a7a:	8afb      	ldrh	r3, [r7, #22]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	82fb      	strh	r3, [r7, #22]
 8000a80:	8afa      	ldrh	r2, [r7, #22]
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d3eb      	bcc.n	8000a60 <bufferPushValues+0x14>
    }
    return pushed;
 8000a88:	8afb      	ldrh	r3, [r7, #22]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <bufferPop>:

uint8_t bufferPop(Buffer * const buffer) {
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b084      	sub	sp, #16
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
    if (buffer->size == 0)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	889b      	ldrh	r3, [r3, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <bufferPop+0x14>
        return 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e01e      	b.n	8000ae4 <bufferPop+0x52>

    disableInt();
 8000aa6:	f000 f895 	bl	8000bd4 <disableInt>

    buffer->size--;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	889b      	ldrh	r3, [r3, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	809a      	strh	r2, [r3, #4]
    uint8_t value = buffer->data[buffer->ptrOut];
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	8852      	ldrh	r2, [r2, #2]
 8000abe:	4413      	add	r3, r2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	73fb      	strb	r3, [r7, #15]
    buffer->ptrOut = (buffer->ptrOut + 1) % buffer->capacity;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	885b      	ldrh	r3, [r3, #2]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	88d2      	ldrh	r2, [r2, #6]
 8000ace:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ad2:	fb01 f202 	mul.w	r2, r1, r2
 8000ad6:	1a9b      	subs	r3, r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	805a      	strh	r2, [r3, #2]

    enableInt();
 8000ade:	f000 f88d 	bl	8000bfc <enableInt>

    return value;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <bufferClear>:

uint8_t bufferPeek(const Buffer * const buffer) {
    return buffer->data[buffer->ptrOut];
}

void bufferClear(Buffer * const buffer) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    disableInt();
 8000af4:	f000 f86e 	bl	8000bd4 <disableInt>
    buffer->size = 0;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	809a      	strh	r2, [r3, #4]
    buffer->ptrIn = 0;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	801a      	strh	r2, [r3, #0]
    buffer->ptrOut = 0;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	805a      	strh	r2, [r3, #2]
    enableInt();
 8000b0a:	f000 f877 	bl	8000bfc <enableInt>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <bufferHasValues>:

uint8_t bufferHasValues(const Buffer * const buffer) {
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
    return buffer->size > 0;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	889b      	ldrh	r3, [r3, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <bufferPopValues>:

uint16_t bufferPopValues(Buffer * const buffer, uint8_t * const buf, const uint16_t bufSize) {
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	4613      	mov	r3, r2
 8000b44:	80fb      	strh	r3, [r7, #6]
    if (!bufferHasValues(buffer))
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f7ff ffe5 	bl	8000b16 <bufferHasValues>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <bufferPopValues+0x1e>
        return 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e01d      	b.n	8000b92 <bufferPopValues+0x5a>
    uint16_t popSize = bufferGetSize(buffer);
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f000 f81f 	bl	8000b9a <bufferGetSize>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	82fb      	strh	r3, [r7, #22]
    if (popSize > bufSize)
 8000b60:	8afa      	ldrh	r2, [r7, #22]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d901      	bls.n	8000b6c <bufferPopValues+0x34>
        popSize = bufSize;
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < popSize; i++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	82bb      	strh	r3, [r7, #20]
 8000b70:	e00a      	b.n	8000b88 <bufferPopValues+0x50>
        buf[i] = bufferPop(buffer);
 8000b72:	8abb      	ldrh	r3, [r7, #20]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	18d4      	adds	r4, r2, r3
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f7ff ff8a 	bl	8000a92 <bufferPop>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < popSize; i++)
 8000b82:	8abb      	ldrh	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	82bb      	strh	r3, [r7, #20]
 8000b88:	8aba      	ldrh	r2, [r7, #20]
 8000b8a:	8afb      	ldrh	r3, [r7, #22]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d3f0      	bcc.n	8000b72 <bufferPopValues+0x3a>
    return popSize;
 8000b90:	8afb      	ldrh	r3, [r7, #22]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}

08000b9a <bufferGetSize>:

uint16_t bufferGetSize(const Buffer * const buffer) {
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
    return buffer->size;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	889b      	ldrh	r3, [r3, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <bufferGetFreeSize>:

uint16_t bufferGetFreeSize(const Buffer * const buffer) {
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
    return buffer->capacity - buffer->size;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	88da      	ldrh	r2, [r3, #6]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	889b      	ldrh	r3, [r3, #4]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <disableInt>:
		bufferPush(destination, var);
	}
	return 1;
}

static void disableInt() {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bda:	f3ef 8310 	mrs	r3, PRIMASK
 8000bde:	607b      	str	r3, [r7, #4]
  return(result);
 8000be0:	687b      	ldr	r3, [r7, #4]
	pmask = __get_PRIMASK();
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <disableInt+0x24>)
 8000be4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000be6:	b672      	cpsid	i
}
 8000be8:	bf00      	nop
    __disable_irq();
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000134 	.word	0x20000134

08000bfc <enableInt>:

static void enableInt() {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
    __set_PRIMASK(pmask);
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <enableInt+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f383 8810 	msr	PRIMASK, r3
}
 8000c0e:	bf00      	nop
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	20000134 	.word	0x20000134

08000c20 <commandCreate>:
};

static uint8_t parseInt(const char *str, uint32_t *result);
static uint8_t parseOnOffStatus(const char *str, OnOffStatus *result);

Command * commandCreate(const char * const name, const CommandAction action, const CommandArgument argType) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71fb      	strb	r3, [r7, #7]
    size_t nameLen = strlen(name);
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff fae8 	bl	8000204 <strlen>
 8000c34:	61f8      	str	r0, [r7, #28]
    char *nameCopy = (char *) malloc(sizeof(char) * (nameLen + 1));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 fbbe 	bl	80053bc <malloc>
 8000c40:	4603      	mov	r3, r0
 8000c42:	61bb      	str	r3, [r7, #24]
    strcpy(nameCopy, name);
 8000c44:	68f9      	ldr	r1, [r7, #12]
 8000c46:	69b8      	ldr	r0, [r7, #24]
 8000c48:	f004 fcd8 	bl	80055fc <strcpy>
    Command *command = (Command *) malloc(sizeof(Command));
 8000c4c:	200c      	movs	r0, #12
 8000c4e:	f004 fbb5 	bl	80053bc <malloc>
 8000c52:	4603      	mov	r3, r0
 8000c54:	617b      	str	r3, [r7, #20]
    command->name = nameCopy;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	601a      	str	r2, [r3, #0]
    command->action = action;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	605a      	str	r2, [r3, #4]
    command->argType = argType;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	721a      	strb	r2, [r3, #8]
    return command;
 8000c68:	697b      	ldr	r3, [r7, #20]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <commandExecute>:

const char * commandExecute(const Command * const command, const char * const argument) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    if (command == NULL || command->action == NULL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <commandExecute+0x18>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <commandExecute+0x1c>
        return NULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e037      	b.n	8000d00 <commandExecute+0x8c>
    switch (command->argType) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7a1b      	ldrb	r3, [r3, #8]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d02c      	beq.n	8000cf2 <commandExecute+0x7e>
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	dc30      	bgt.n	8000cfe <commandExecute+0x8a>
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <commandExecute+0x32>
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d013      	beq.n	8000ccc <commandExecute+0x58>
 8000ca4:	e02b      	b.n	8000cfe <commandExecute+0x8a>
        case INT:
        {
            uint32_t intArg;
            if (!parseInt(argument, &intArg))
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	6838      	ldr	r0, [r7, #0]
 8000cae:	f000 f831 	bl	8000d14 <parseInt>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <commandExecute+0x48>
                return "The argument must be integer\n";
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <commandExecute+0x94>)
 8000cba:	e021      	b.n	8000d00 <commandExecute+0x8c>
            return (*command->action)(&intArg);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f107 020c 	add.w	r2, r7, #12
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4798      	blx	r3
 8000cc8:	4603      	mov	r3, r0
 8000cca:	e019      	b.n	8000d00 <commandExecute+0x8c>
        }
        case ON_OFF:
        {
            OnOffStatus statusArg;
            if (!parseOnOffStatus(argument, &statusArg))
 8000ccc:	f107 030b 	add.w	r3, r7, #11
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6838      	ldr	r0, [r7, #0]
 8000cd4:	f000 f83a 	bl	8000d4c <parseOnOffStatus>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <commandExecute+0x6e>
                return "The argument must be 'on' or 'off'\n";
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <commandExecute+0x98>)
 8000ce0:	e00e      	b.n	8000d00 <commandExecute+0x8c>
            return (*command->action)(&statusArg);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f107 020b 	add.w	r2, r7, #11
 8000cea:	4610      	mov	r0, r2
 8000cec:	4798      	blx	r3
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e006      	b.n	8000d00 <commandExecute+0x8c>
        }
        case NONE:
            return (*command->action)(NULL);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	4798      	blx	r3
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e000      	b.n	8000d00 <commandExecute+0x8c>
        default:
            return "Unknown argument type\n";
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <commandExecute+0x9c>)
    }
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	08005e6c 	.word	0x08005e6c
 8000d0c:	08005e8c 	.word	0x08005e8c
 8000d10:	08005eb0 	.word	0x08005eb0

08000d14 <parseInt>:

static uint8_t parseInt(const char * const str, uint32_t * const result) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    char *endPtr = NULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
    *result = strtoul(str, &(endPtr), 10);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	220a      	movs	r2, #10
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f004 fce0 	bl	80056f0 <strtoul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	601a      	str	r2, [r3, #0]
    if (endPtr == str) {
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d101      	bne.n	8000d42 <parseInt+0x2e>
        return 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <parseInt+0x30>
    }
    return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <parseOnOffStatus>:

static uint8_t parseOnOffStatus(const char *str, OnOffStatus * const result) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
    if (strcmp(str, "on") == 0) {
 8000d56:	490e      	ldr	r1, [pc, #56]	; (8000d90 <parseOnOffStatus+0x44>)
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fa49 	bl	80001f0 <strcmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d104      	bne.n	8000d6e <parseOnOffStatus+0x22>
        *result = ON;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00c      	b.n	8000d88 <parseOnOffStatus+0x3c>
    } else if (strcmp(str, "off") == 0) {
 8000d6e:	4909      	ldr	r1, [pc, #36]	; (8000d94 <parseOnOffStatus+0x48>)
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fa3d 	bl	80001f0 <strcmp>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <parseOnOffStatus+0x3a>
        *result = OFF;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
        return 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <parseOnOffStatus+0x3c>
    }
    return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	08005ec8 	.word	0x08005ec8
 8000d94:	08005ecc 	.word	0x08005ecc

08000d98 <commandGetName>:
    if (command == NULL)
        return;
    command->action = action;
}

const char * commandGetName(const Command * const command) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    if (command == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <commandGetName+0x12>
        return NULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e001      	b.n	8000dae <commandGetName+0x16>
    return command->name;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <FlashWriteWord>:
	HAL_FLASH_Unlock();
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
	HAL_FLASH_Lock();
}

void FlashWriteWord(uint32_t Address, uint32_t Data) {
 8000dba:	b5b0      	push	{r4, r5, r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8000dc8:	f001 fd22 	bl	8002810 <HAL_FLASH_Unlock>
	while (status != HAL_OK)
 8000dcc:	e00b      	b.n	8000de6 <FlashWriteWord+0x2c>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	461c      	mov	r4, r3
 8000dd4:	4615      	mov	r5, r2
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	462b      	mov	r3, r5
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f001 fcc3 	bl	8002768 <HAL_FLASH_Program>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1f0      	bne.n	8000dce <FlashWriteWord+0x14>
	HAL_FLASH_Lock();
 8000dec:	f001 fd32 	bl	8002854 <HAL_FLASH_Lock>
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bdb0      	pop	{r4, r5, r7, pc}

08000df8 <FlashReadWord>:

uint8_t FlashReadByte(uint32_t Address) {
    return (*(__IO uint8_t*)Address);
}

uint32_t FlashReadWord(uint32_t Address) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    return (*(__IO uint32_t*)Address);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <EraseSector>:

void EraseSector(uint32_t Sector) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
	HAL_FLASH_Unlock();
 8000e1c:	f001 fcf8 	bl	8002810 <HAL_FLASH_Unlock>
	uint32_t SectorError;
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <EraseSector+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Sector = Sector;
 8000e26:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <EraseSector+0x4c>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors = 1 ;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <EraseSector+0x4c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	60da      	str	r2, [r3, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <EraseSector+0x4c>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	611a      	str	r2, [r3, #16]
	while (status != HAL_OK)
 8000e38:	e007      	b.n	8000e4a <EraseSector+0x3a>
		status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <EraseSector+0x4c>)
 8000e42:	f001 fe57 	bl	8002af4 <HAL_FLASHEx_Erase>
 8000e46:	4603      	mov	r3, r0
 8000e48:	73fb      	strb	r3, [r7, #15]
	while (status != HAL_OK)
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f4      	bne.n	8000e3a <EraseSector+0x2a>
	HAL_FLASH_Lock();
 8000e50:	f001 fd00 	bl	8002854 <HAL_FLASH_Lock>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000138 	.word	0x20000138

08000e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_GPIO_Init+0x68>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <asciiToHex>:
uint8_t calculation_check_sum = 0;//чек-сумма
uint8_t tempBuf[8];

uint8_t firstFirmwarePlaceCheck = 1;

void asciiToHex(uint8_t* buff, uint8_t count) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	for(i=0; i<count;i++) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e023      	b.n	8000f26 <asciiToHex+0x5a>
		if(buff[i] <= '9' && buff[i] >= '0' ) {
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b39      	cmp	r3, #57	; 0x39
 8000ee8:	d810      	bhi.n	8000f0c <asciiToHex+0x40>
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ef4:	d90a      	bls.n	8000f0c <asciiToHex+0x40>
			buff[i] -= 0x30;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	440b      	add	r3, r1
 8000f04:	3a30      	subs	r2, #48	; 0x30
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e009      	b.n	8000f20 <asciiToHex+0x54>
		}
		else {
			buff[i] = buff[i] - 0x41 + 10;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	440b      	add	r3, r1
 8000f1a:	3a37      	subs	r2, #55	; 0x37
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<count;i++) {
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	3301      	adds	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	78fb      	ldrb	r3, [r7, #3]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3d7      	bcc.n	8000ede <asciiToHex+0x12>
		}
	}
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <fillBuffer>:

void fillBuffer(uint8_t* destination, uint8_t* source, uint16_t* startPtr, uint16_t count) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	807b      	strh	r3, [r7, #2]
	for (int16_t i = 0; i < count; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	82fb      	strh	r3, [r7, #22]
 8000f4e:	e014      	b.n	8000f7a <fillBuffer+0x3e>
		destination[i] = source[*startPtr + i];
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	441a      	add	r2, r3
 8000f62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f66:	68f9      	ldr	r1, [r7, #12]
 8000f68:	440b      	add	r3, r1
 8000f6a:	7812      	ldrb	r2, [r2, #0]
 8000f6c:	701a      	strb	r2, [r3, #0]
	for (int16_t i = 0; i < count; i++) {
 8000f6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3301      	adds	r3, #1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	82fb      	strh	r3, [r7, #22]
 8000f7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbe5      	blt.n	8000f50 <fillBuffer+0x14>
	}
	*startPtr += count;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	881a      	ldrh	r2, [r3, #0]
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	801a      	strh	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <flashHex>:

uint8_t flashHex(uint8_t* flashBuf, uint16_t size) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
	uint16_t ptr = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	81bb      	strh	r3, [r7, #12]
	while (ptr < size) {
 8000fb0:	e10d      	b.n	80011ce <flashHex+0x22e>
		if(flashBuf[ptr] == ':') {
 8000fb2:	89bb      	ldrh	r3, [r7, #12]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b3a      	cmp	r3, #58	; 0x3a
 8000fbe:	f040 8102 	bne.w	80011c6 <flashHex+0x226>
			ptr++;
 8000fc2:	89bb      	ldrh	r3, [r7, #12]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	81bb      	strh	r3, [r7, #12]
			fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2308      	movs	r3, #8
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4885      	ldr	r0, [pc, #532]	; (80011e8 <flashHex+0x248>)
 8000fd4:	f7ff ffb2 	bl	8000f3c <fillBuffer>
			asciiToHex(tempBuf, 8);
 8000fd8:	2108      	movs	r1, #8
 8000fda:	4883      	ldr	r0, [pc, #524]	; (80011e8 <flashHex+0x248>)
 8000fdc:	f7ff ff76 	bl	8000ecc <asciiToHex>

			size_data = 2*(tempBuf[1] + 16*tempBuf[0]);//находим размер данных
 8000fe0:	4b81      	ldr	r3, [pc, #516]	; (80011e8 <flashHex+0x248>)
 8000fe2:	785b      	ldrb	r3, [r3, #1]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b80      	ldr	r3, [pc, #512]	; (80011e8 <flashHex+0x248>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4413      	add	r3, r2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b7d      	ldr	r3, [pc, #500]	; (80011ec <flashHex+0x24c>)
 8000ff6:	701a      	strb	r2, [r3, #0]
			address_data = tempBuf[5] + 16*tempBuf[4] + 256*tempBuf[3] + 4096*tempBuf[2];//адрес
 8000ff8:	4b7b      	ldr	r3, [pc, #492]	; (80011e8 <flashHex+0x248>)
 8000ffa:	795b      	ldrb	r3, [r3, #5]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b7a      	ldr	r3, [pc, #488]	; (80011e8 <flashHex+0x248>)
 8001000:	78db      	ldrb	r3, [r3, #3]
 8001002:	b299      	uxth	r1, r3
 8001004:	4b78      	ldr	r3, [pc, #480]	; (80011e8 <flashHex+0x248>)
 8001006:	789b      	ldrb	r3, [r3, #2]
 8001008:	b29b      	uxth	r3, r3
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	b29b      	uxth	r3, r3
 800100e:	440b      	add	r3, r1
 8001010:	b29b      	uxth	r3, r3
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	b299      	uxth	r1, r3
 8001016:	4b74      	ldr	r3, [pc, #464]	; (80011e8 <flashHex+0x248>)
 8001018:	791b      	ldrb	r3, [r3, #4]
 800101a:	b29b      	uxth	r3, r3
 800101c:	440b      	add	r3, r1
 800101e:	b29b      	uxth	r3, r3
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	b29b      	uxth	r3, r3
 8001024:	4413      	add	r3, r2
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b71      	ldr	r3, [pc, #452]	; (80011f0 <flashHex+0x250>)
 800102a:	801a      	strh	r2, [r3, #0]
			type_data = tempBuf[7] + 16*tempBuf[6];//и тип
 800102c:	4b6e      	ldr	r3, [pc, #440]	; (80011e8 <flashHex+0x248>)
 800102e:	79da      	ldrb	r2, [r3, #7]
 8001030:	4b6d      	ldr	r3, [pc, #436]	; (80011e8 <flashHex+0x248>)
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4413      	add	r3, r2
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b6d      	ldr	r3, [pc, #436]	; (80011f4 <flashHex+0x254>)
 800103e:	701a      	strb	r2, [r3, #0]

			calculation_check_sum = size_data/2 + (uint8_t)address_data + (uint8_t)(address_data>>8) + type_data;//считаем чек сумму
 8001040:	4b6a      	ldr	r3, [pc, #424]	; (80011ec <flashHex+0x24c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b69      	ldr	r3, [pc, #420]	; (80011f0 <flashHex+0x250>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4413      	add	r3, r2
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b67      	ldr	r3, [pc, #412]	; (80011f0 <flashHex+0x250>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	0a1b      	lsrs	r3, r3, #8
 8001058:	b29b      	uxth	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4413      	add	r3, r2
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b64      	ldr	r3, [pc, #400]	; (80011f4 <flashHex+0x254>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4413      	add	r3, r2
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b63      	ldr	r3, [pc, #396]	; (80011f8 <flashHex+0x258>)
 800106a:	701a      	strb	r2, [r3, #0]

			if(type_data == 0x00) {
 800106c:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <flashHex+0x254>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	f040 8093 	bne.w	800119c <flashHex+0x1fc>
				while(size_data > 0) {
 8001076:	e066      	b.n	8001146 <flashHex+0x1a6>
					fillBuffer(tempBuf, flashBuf, &ptr, 8);
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	2308      	movs	r3, #8
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4859      	ldr	r0, [pc, #356]	; (80011e8 <flashHex+0x248>)
 8001082:	f7ff ff5b 	bl	8000f3c <fillBuffer>
					asciiToHex(tempBuf, 8);
 8001086:	2108      	movs	r1, #8
 8001088:	4857      	ldr	r0, [pc, #348]	; (80011e8 <flashHex+0x248>)
 800108a:	f7ff ff1f 	bl	8000ecc <asciiToHex>


					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e024      	b.n	80010de <flashHex+0x13e>
						tempBuf[i] <<= 4;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	4a54      	ldr	r2, [pc, #336]	; (80011e8 <flashHex+0x248>)
 8001098:	5cd2      	ldrb	r2, [r2, r3]
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d1      	uxtb	r1, r2
 80010a0:	4a51      	ldr	r2, [pc, #324]	; (80011e8 <flashHex+0x248>)
 80010a2:	54d1      	strb	r1, [r2, r3]
						tempBuf[i] = tempBuf[i] | tempBuf[i+1];
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	4a50      	ldr	r2, [pc, #320]	; (80011e8 <flashHex+0x248>)
 80010a8:	5cd1      	ldrb	r1, [r2, r3]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <flashHex+0x248>)
 80010b0:	5cd2      	ldrb	r2, [r2, r3]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	b2d1      	uxtb	r1, r2
 80010b8:	4a4b      	ldr	r2, [pc, #300]	; (80011e8 <flashHex+0x248>)
 80010ba:	54d1      	strb	r1, [r2, r3]
						program_data |= tempBuf[i] <<(i*4);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	4a4a      	ldr	r2, [pc, #296]	; (80011e8 <flashHex+0x248>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	461a      	mov	r2, r3
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <flashHex+0x25c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	4a49      	ldr	r2, [pc, #292]	; (80011fc <flashHex+0x25c>)
 80010d6:	6013      	str	r3, [r2, #0]
					for(uint8_t i = 0; i < 8; i = i + 2) { //формируем 32-битное слово для записи
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	3302      	adds	r3, #2
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	d9d7      	bls.n	8001094 <flashHex+0xf4>
					}

					FlashWriteWord(applicationAddress, program_data);
 80010e4:	4b46      	ldr	r3, [pc, #280]	; (8001200 <flashHex+0x260>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a44      	ldr	r2, [pc, #272]	; (80011fc <flashHex+0x25c>)
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe63 	bl	8000dba <FlashWriteWord>
					calculation_check_sum += (uint8_t)program_data + (uint8_t)(program_data>>8) + (uint8_t)(program_data>>16) + (uint8_t)(program_data>>24);
 80010f4:	4b41      	ldr	r3, [pc, #260]	; (80011fc <flashHex+0x25c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b40      	ldr	r3, [pc, #256]	; (80011fc <flashHex+0x25c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4413      	add	r3, r2
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <flashHex+0x25c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0c1b      	lsrs	r3, r3, #16
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4413      	add	r3, r2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <flashHex+0x25c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0e1b      	lsrs	r3, r3, #24
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <flashHex+0x258>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <flashHex+0x258>)
 8001128:	701a      	strb	r2, [r3, #0]
					size_data -= 8;
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <flashHex+0x24c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3b08      	subs	r3, #8
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <flashHex+0x24c>)
 8001134:	701a      	strb	r2, [r3, #0]
					applicationAddress += 4;
 8001136:	4b32      	ldr	r3, [pc, #200]	; (8001200 <flashHex+0x260>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3304      	adds	r3, #4
 800113c:	4a30      	ldr	r2, [pc, #192]	; (8001200 <flashHex+0x260>)
 800113e:	6013      	str	r3, [r2, #0]
					program_data = 0;
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <flashHex+0x25c>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
				while(size_data > 0) {
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <flashHex+0x24c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d194      	bne.n	8001078 <flashHex+0xd8>
				}
				calculation_check_sum =  ~(calculation_check_sum) + 1;
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <flashHex+0x258>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	425b      	negs	r3, r3
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <flashHex+0x258>)
 8001158:	701a      	strb	r2, [r3, #0]

				fillBuffer(tempBuf, flashBuf, &ptr, 2);
 800115a:	f107 020c 	add.w	r2, r7, #12
 800115e:	2302      	movs	r3, #2
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4821      	ldr	r0, [pc, #132]	; (80011e8 <flashHex+0x248>)
 8001164:	f7ff feea 	bl	8000f3c <fillBuffer>
				asciiToHex(tempBuf, 2);
 8001168:	2102      	movs	r1, #2
 800116a:	481f      	ldr	r0, [pc, #124]	; (80011e8 <flashHex+0x248>)
 800116c:	f7ff feae 	bl	8000ecc <asciiToHex>


				check_sum = tempBuf[1] + 16*tempBuf[0];
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <flashHex+0x248>)
 8001172:	785a      	ldrb	r2, [r3, #1]
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <flashHex+0x248>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4413      	add	r3, r2
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <flashHex+0x264>)
 8001182:	701a      	strb	r2, [r3, #0]
				if(calculation_check_sum != check_sum ) {
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <flashHex+0x258>)
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <flashHex+0x264>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <flashHex+0x1f4>
					return 0;//uartTransmit("\n\rchecksum error 1\n\r", 20);
 8001190:	2300      	movs	r3, #0
 8001192:	e024      	b.n	80011de <flashHex+0x23e>
				}
				calculation_check_sum = 0;//обнуляем чек сумму
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <flashHex+0x258>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e014      	b.n	80011c6 <flashHex+0x226>

			} else if(type_data == 0x04) {//дополнительный адрес
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <flashHex+0x254>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d10c      	bne.n	80011be <flashHex+0x21e>
				if (firstFirmwarePlaceCheck) {
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <flashHex+0x268>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00c      	beq.n	80011c6 <flashHex+0x226>
					applicationAddress = getLatestApplicationAddress();
 80011ac:	f7ff fa52 	bl	8000654 <getLatestApplicationAddress>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <flashHex+0x260>)
 80011b4:	6013      	str	r3, [r2, #0]
					firstFirmwarePlaceCheck = 0;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <flashHex+0x268>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e003      	b.n	80011c6 <flashHex+0x226>
				}
			} else if(type_data == 0x01) {//конец файла
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <flashHex+0x254>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d009      	beq.n	80011da <flashHex+0x23a>
				break;
			}
		}
		ptr++;
 80011c6:	89bb      	ldrh	r3, [r7, #12]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	81bb      	strh	r3, [r7, #12]
	while (ptr < size) {
 80011ce:	89bb      	ldrh	r3, [r7, #12]
 80011d0:	887a      	ldrh	r2, [r7, #2]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	f63f aeed 	bhi.w	8000fb2 <flashHex+0x12>
 80011d8:	e000      	b.n	80011dc <flashHex+0x23c>
				break;
 80011da:	bf00      	nop
	}
	return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000160 	.word	0x20000160
 80011ec:	20000150 	.word	0x20000150
 80011f0:	20000154 	.word	0x20000154
 80011f4:	20000151 	.word	0x20000151
 80011f8:	2000015c 	.word	0x2000015c
 80011fc:	20000158 	.word	0x20000158
 8001200:	2000014c 	.word	0x2000014c
 8001204:	20000152 	.word	0x20000152
 8001208:	20000020 	.word	0x20000020

0800120c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001210:	f3bf 8f4f 	dsb	sy
}
 8001214:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <__NVIC_SystemReset+0x24>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800121e:	4904      	ldr	r1, [pc, #16]	; (8001230 <__NVIC_SystemReset+0x24>)
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_SystemReset+0x28>)
 8001222:	4313      	orrs	r3, r2
 8001224:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001226:	f3bf 8f4f 	dsb	sy
}
 800122a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <__NVIC_SystemReset+0x20>
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	05fa0004 	.word	0x05fa0004

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  commands[0] = commandCreate("jump", (CommandAction) jumpToUserApp, NONE);
 800123e:	2202      	movs	r2, #2
 8001240:	4927      	ldr	r1, [pc, #156]	; (80012e0 <main+0xa8>)
 8001242:	4828      	ldr	r0, [pc, #160]	; (80012e4 <main+0xac>)
 8001244:	f7ff fcec 	bl	8000c20 <commandCreate>
 8001248:	4603      	mov	r3, r0
 800124a:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <main+0xb0>)
 800124c:	6013      	str	r3, [r2, #0]
  commands[1] = commandCreate("update", (CommandAction) downloadFirmware, NONE);
 800124e:	2202      	movs	r2, #2
 8001250:	4926      	ldr	r1, [pc, #152]	; (80012ec <main+0xb4>)
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <main+0xb8>)
 8001254:	f7ff fce4 	bl	8000c20 <commandCreate>
 8001258:	4603      	mov	r3, r0
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <main+0xb0>)
 800125c:	6053      	str	r3, [r2, #4]
  commands[2] = commandCreate("version", (CommandAction) getAppVersions, NONE);//TODO
 800125e:	2202      	movs	r2, #2
 8001260:	4924      	ldr	r1, [pc, #144]	; (80012f4 <main+0xbc>)
 8001262:	4825      	ldr	r0, [pc, #148]	; (80012f8 <main+0xc0>)
 8001264:	f7ff fcdc 	bl	8000c20 <commandCreate>
 8001268:	4603      	mov	r3, r0
 800126a:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <main+0xb0>)
 800126c:	6093      	str	r3, [r2, #8]
  commands[3] = commandCreate("help", (CommandAction) getHelpInfo, NONE);
 800126e:	2202      	movs	r2, #2
 8001270:	4922      	ldr	r1, [pc, #136]	; (80012fc <main+0xc4>)
 8001272:	4823      	ldr	r0, [pc, #140]	; (8001300 <main+0xc8>)
 8001274:	f7ff fcd4 	bl	8000c20 <commandCreate>
 8001278:	4603      	mov	r3, r0
 800127a:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <main+0xb0>)
 800127c:	60d3      	str	r3, [r2, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127e:	f000 ffc7 	bl	8002210 <HAL_Init>

  /* USER CODE BEGIN Init */
  uartInit();
 8001282:	f000 fca3 	bl	8001bcc <uartInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f847 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f7ff fde9 	bl	8000e60 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800128e:	f000 fbcf 	bl	8001a30 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001292:	f000 fb03 	bl	800189c <MX_TIM6_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  uartEnableInterruption();
 8001296:	f000 fccf 	bl	8001c38 <uartEnableInterruption>
  menuInit(commands, 4);
 800129a:	2104      	movs	r1, #4
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <main+0xb0>)
 800129e:	f000 f965 	bl	800156c <menuInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_IWDG_Refresh(&hiwdg);
 80012a2:	4818      	ldr	r0, [pc, #96]	; (8001304 <main+0xcc>)
 80012a4:	f001 ff12 	bl	80030cc <HAL_IWDG_Refresh>

	  if (uartHasNext()) {
 80012a8:	f000 fc84 	bl	8001bb4 <uartHasNext>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <main+0x7e>
		  receiveAndSendChar();
 80012b2:	f000 f8f9 	bl	80014a8 <receiveAndSendChar>
	  }

	  if (hasLine) {
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <main+0xd0>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f1      	beq.n	80012a2 <main+0x6a>
		  uartBuf[uartBufLast] = '\0';
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <main+0xd4>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <main+0xd8>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	5499      	strb	r1, [r3, r2]
		  const char* commandResult = menuExecuteCommand((char*) uartBuf);
 80012ca:	4811      	ldr	r0, [pc, #68]	; (8001310 <main+0xd8>)
 80012cc:	f000 f982 	bl	80015d4 <menuExecuteCommand>
 80012d0:	6078      	str	r0, [r7, #4]
		  sendMessage("\n");
 80012d2:	4810      	ldr	r0, [pc, #64]	; (8001314 <main+0xdc>)
 80012d4:	f000 f934 	bl	8001540 <sendMessage>
		  sendCommandResult(commandResult);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f915 	bl	8001508 <sendCommandResult>
	  HAL_IWDG_Refresh(&hiwdg);
 80012de:	e7e0      	b.n	80012a2 <main+0x6a>
 80012e0:	080013f1 	.word	0x080013f1
 80012e4:	08005ed0 	.word	0x08005ed0
 80012e8:	200001f8 	.word	0x200001f8
 80012ec:	0800142d 	.word	0x0800142d
 80012f0:	08005ed8 	.word	0x08005ed8
 80012f4:	08001495 	.word	0x08001495
 80012f8:	08005ee0 	.word	0x08005ee0
 80012fc:	08001419 	.word	0x08001419
 8001300:	08005ee8 	.word	0x08005ee8
 8001304:	20000168 	.word	0x20000168
 8001308:	200001f5 	.word	0x200001f5
 800130c:	200001f4 	.word	0x200001f4
 8001310:	20000174 	.word	0x20000174
 8001314:	08005ef0 	.word	0x08005ef0

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	; 0x50
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	2230      	movs	r2, #48	; 0x30
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f004 f850 	bl	80053cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <SystemClock_Config+0xd0>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <SystemClock_Config+0xd0>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	; 0x40
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <SystemClock_Config+0xd0>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <SystemClock_Config+0xd4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001364:	4a21      	ldr	r2, [pc, #132]	; (80013ec <SystemClock_Config+0xd4>)
 8001366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <SystemClock_Config+0xd4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001378:	230a      	movs	r3, #10
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001380:	2310      	movs	r3, #16
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001384:	2301      	movs	r3, #1
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001388:	2302      	movs	r3, #2
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800138c:	2300      	movs	r3, #0
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001390:	2308      	movs	r3, #8
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001394:	2340      	movs	r3, #64	; 0x40
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001398:	2302      	movs	r3, #2
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800139c:	2304      	movs	r3, #4
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 fea1 	bl	80030ec <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013b0:	f000 f8d7 	bl	8001562 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80013bc:	2390      	movs	r3, #144	; 0x90
 80013be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 f904 	bl	80035dc <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013da:	f000 f8c2 	bl	8001562 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	; 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <jumpToUserApp>:

/* USER CODE BEGIN 4 */
static char* jumpToUserApp() {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	validateApplications();
 80013f4:	f7ff f9ce 	bl	8000794 <validateApplications>
	if (getLatestApplicationAddress() == 0) {
 80013f8:	f7ff f92c 	bl	8000654 <getLatestApplicationAddress>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <jumpToUserApp+0x16>
		return "No valid application in flash\n";
 8001402:	4b03      	ldr	r3, [pc, #12]	; (8001410 <jumpToUserApp+0x20>)
 8001404:	e002      	b.n	800140c <jumpToUserApp+0x1c>
	} else {
		jumpToApp();
 8001406:	f7ff fa01 	bl	800080c <jumpToApp>
		return "Done";
 800140a:	4b02      	ldr	r3, [pc, #8]	; (8001414 <jumpToUserApp+0x24>)
	}
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	08005ef4 	.word	0x08005ef4
 8001414:	08005f14 	.word	0x08005f14

08001418 <getHelpInfo>:

static char* getHelpInfo() {
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
    return "jump: jump to application\n\
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <getHelpInfo+0x10>)
update: download firmware and jump to it\n\
version: get current version of application\n\
help: get information about commands\n";
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	08005f1c 	.word	0x08005f1c

0800142c <downloadFirmware>:

static char* downloadFirmware() {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
	validateApplications();
 8001432:	f7ff f9af 	bl	8000794 <validateApplications>
	updateConfig();
 8001436:	f7ff f93b 	bl	80006b0 <updateConfig>
	sendMessage("Bank erasing...\n");
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <downloadFirmware+0x60>)
 800143c:	f000 f880 	bl	8001540 <sendMessage>
	HAL_Delay(100);
 8001440:	2064      	movs	r0, #100	; 0x64
 8001442:	f000 ff8b 	bl	800235c <HAL_Delay>
	eraseLogicalBank();
 8001446:	f7ff fa9d 	bl	8000984 <eraseLogicalBank>
	sendMessage("Send hex file via XMODEM\n");
 800144a:	4811      	ldr	r0, [pc, #68]	; (8001490 <downloadFirmware+0x64>)
 800144c:	f000 f878 	bl	8001540 <sendMessage>
	HAL_Delay(100);
 8001450:	2064      	movs	r0, #100	; 0x64
 8001452:	f000 ff83 	bl	800235c <HAL_Delay>
	uint8_t xmodemStatus = xmodemReceive();
 8001456:	f000 fc87 	bl	8001d68 <xmodemReceive>
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	if (xmodemStatus == 1) {
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d103      	bne.n	800146c <downloadFirmware+0x40>
		return jumpToUserApp();
 8001464:	f7ff ffc4 	bl	80013f0 <jumpToUserApp>
 8001468:	4603      	mov	r3, r0
 800146a:	e00a      	b.n	8001482 <downloadFirmware+0x56>
	} else if (xmodemStatus == 2) {
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d103      	bne.n	800147a <downloadFirmware+0x4e>
		rollbackConfig();
 8001472:	f7ff f971 	bl	8000758 <rollbackConfig>
		NVIC_SystemReset(); //TODO
 8001476:	f7ff fec9 	bl	800120c <__NVIC_SystemReset>
		return "Error. Choose firmware for another bank.\n";
	} else {
		rollbackConfig();
 800147a:	f7ff f96d 	bl	8000758 <rollbackConfig>
		NVIC_SystemReset(); //TODO
 800147e:	f7ff fec5 	bl	800120c <__NVIC_SystemReset>
		return "Error. Update aborted.\n";
	};
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08005fb4 	.word	0x08005fb4
 8001490:	08005fc8 	.word	0x08005fc8

08001494 <getAppVersions>:

static char* getAppVersions() {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	validateApplications();
 8001498:	f7ff f97c 	bl	8000794 <validateApplications>
	return getVersions();
 800149c:	f7ff f892 	bl	80005c4 <getVersions>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <receiveAndSendChar>:

static void receiveAndSendChar() {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    if (uartReceive(uartBuf + uartBufLast, 1)) {
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <receiveAndSendChar+0x54>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <receiveAndSendChar+0x58>)
 80014b6:	4413      	add	r3, r2
 80014b8:	2101      	movs	r1, #1
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fb9c 	bl	8001bf8 <uartReceive>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <receiveAndSendChar+0x4c>
        uint8_t received = uartBuf[uartBufLast];
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <receiveAndSendChar+0x54>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <receiveAndSendChar+0x58>)
 80014ce:	5c9b      	ldrb	r3, [r3, r2]
 80014d0:	71fb      	strb	r3, [r7, #7]
        uartBufLast++;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <receiveAndSendChar+0x54>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <receiveAndSendChar+0x54>)
 80014dc:	701a      	strb	r2, [r3, #0]
        uartTransmit(&received, 1);
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	2101      	movs	r1, #1
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fb1e 	bl	8001b24 <uartTransmit>

        if (received == '\r')
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b0d      	cmp	r3, #13
 80014ec:	d102      	bne.n	80014f4 <receiveAndSendChar+0x4c>
            hasLine = 1;
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <receiveAndSendChar+0x5c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
    }
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200001f4 	.word	0x200001f4
 8001500:	20000174 	.word	0x20000174
 8001504:	200001f5 	.word	0x200001f5

08001508 <sendCommandResult>:

static void sendCommandResult(const char* commandResult) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) commandResult, strlen(commandResult));
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7fe fe77 	bl	8000204 <strlen>
 8001516:	4603      	mov	r3, r0
 8001518:	b29b      	uxth	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fb01 	bl	8001b24 <uartTransmit>
    uartBufLast = 0;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <sendCommandResult+0x30>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
    hasLine = 0;
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <sendCommandResult+0x34>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001f4 	.word	0x200001f4
 800153c:	200001f5 	.word	0x200001f5

08001540 <sendMessage>:

static void sendMessage(const char* msg) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    uartTransmit((uint8_t *) msg, strlen(msg));
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7fe fe5b 	bl	8000204 <strlen>
 800154e:	4603      	mov	r3, r0
 8001550:	b29b      	uxth	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fae5 	bl	8001b24 <uartTransmit>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001566:	b672      	cpsid	i
}
 8001568:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156a:	e7fe      	b.n	800156a <Error_Handler+0x8>

0800156c <menuInit>:
uint16_t menuSize;

static int32_t commandSepNameFromArg(const char *commandNameWithArg);
static void strTrim(char *str);

void menuInit(Command ** const commands, const uint16_t commandsSize) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
    if (menuCommands != NULL)
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <menuInit+0x60>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d121      	bne.n	80015c4 <menuInit+0x58>
        return;
    menuCommands = (Command **) malloc(sizeof(Command *) * commandsSize);
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f003 ff19 	bl	80053bc <malloc>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <menuInit+0x60>)
 8001590:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 8001592:	2300      	movs	r3, #0
 8001594:	81fb      	strh	r3, [r7, #14]
 8001596:	e00d      	b.n	80015b4 <menuInit+0x48>
        menuCommands[i] = commands[i];
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	441a      	add	r2, r3
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <menuInit+0x60>)
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	89fb      	ldrh	r3, [r7, #14]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < commandsSize; i++) {
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	3301      	adds	r3, #1
 80015b2:	81fb      	strh	r3, [r7, #14]
 80015b4:	89fa      	ldrh	r2, [r7, #14]
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3ed      	bcc.n	8001598 <menuInit+0x2c>
    }
    menuSize = commandsSize;
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <menuInit+0x64>)
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	8013      	strh	r3, [r2, #0]
 80015c2:	e000      	b.n	80015c6 <menuInit+0x5a>
        return;
 80015c4:	bf00      	nop
}
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000208 	.word	0x20000208
 80015d0:	2000020c 	.word	0x2000020c

080015d4 <menuExecuteCommand>:

const char * menuExecuteCommand(char * const commandNameWithArg) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    strTrim(commandNameWithArg);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f866 	bl	80016ae <strTrim>
    const int32_t sep = commandSepNameFromArg(commandNameWithArg);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f88a 	bl	80016fc <commandSepNameFromArg>
 80015e8:	6178      	str	r0, [r7, #20]
    const char *commandArg = NULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    if (sep != -1) {
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d009      	beq.n	800160a <menuExecuteCommand+0x36>
        commandNameWithArg[sep] = '\0';
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
        commandArg = commandNameWithArg + sep + 1;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4413      	add	r3, r2
 8001608:	61fb      	str	r3, [r7, #28]
    }
    const char * const commandName = commandNameWithArg;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	613b      	str	r3, [r7, #16]
    for (uint16_t i = 0; i < menuSize; i++) {
 800160e:	2300      	movs	r3, #0
 8001610:	837b      	strh	r3, [r7, #26]
 8001612:	e020      	b.n	8001656 <menuExecuteCommand+0x82>
        const Command * const command = menuCommands[i];
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <menuExecuteCommand+0x98>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	8b7b      	ldrh	r3, [r7, #26]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
        if (strcmp(commandGetName(menuCommands[i]), commandName) == 0) {
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <menuExecuteCommand+0x98>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	8b7b      	ldrh	r3, [r7, #26]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fbb2 	bl	8000d98 <commandGetName>
 8001634:	4603      	mov	r3, r0
 8001636:	6939      	ldr	r1, [r7, #16]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe fdd9 	bl	80001f0 <strcmp>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <menuExecuteCommand+0x7c>
            return commandExecute(command, commandArg);
 8001644:	69f9      	ldr	r1, [r7, #28]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff fb14 	bl	8000c74 <commandExecute>
 800164c:	4603      	mov	r3, r0
 800164e:	e008      	b.n	8001662 <menuExecuteCommand+0x8e>
    for (uint16_t i = 0; i < menuSize; i++) {
 8001650:	8b7b      	ldrh	r3, [r7, #26]
 8001652:	3301      	adds	r3, #1
 8001654:	837b      	strh	r3, [r7, #26]
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <menuExecuteCommand+0x9c>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	8b7a      	ldrh	r2, [r7, #26]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3d9      	bcc.n	8001614 <menuExecuteCommand+0x40>
        }
    }
    return "Command not found, print \"help\" for getting info\n";
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <menuExecuteCommand+0xa0>)
}
 8001662:	4618      	mov	r0, r3
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000208 	.word	0x20000208
 8001670:	2000020c 	.word	0x2000020c
 8001674:	08005fe4 	.word	0x08005fe4

08001678 <isSpaceChar>:

static uint8_t isSpaceChar(char ch) {
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
    return ch == '\n' || ch == ' ' || ch == '\t' || ch == '\r';
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b0a      	cmp	r3, #10
 8001686:	d008      	beq.n	800169a <isSpaceChar+0x22>
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	2b20      	cmp	r3, #32
 800168c:	d005      	beq.n	800169a <isSpaceChar+0x22>
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b09      	cmp	r3, #9
 8001692:	d002      	beq.n	800169a <isSpaceChar+0x22>
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b0d      	cmp	r3, #13
 8001698:	d101      	bne.n	800169e <isSpaceChar+0x26>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <isSpaceChar+0x28>
 800169e:	2300      	movs	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <strTrim>:

static void strTrim(char * const str) {
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(str);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7fe fda4 	bl	8000204 <strlen>
 80016bc:	4603      	mov	r3, r0
 80016be:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	e011      	b.n	80016ec <strTrim+0x3e>
        if (isSpaceChar(str[i])) {
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ffd1 	bl	8001678 <isSpaceChar>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00b      	beq.n	80016f4 <strTrim+0x46>
            str[i] = '\0';
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
    for (int32_t i = len - 1; i >= 0; i--) {
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	daea      	bge.n	80016c8 <strTrim+0x1a>
 80016f2:	e000      	b.n	80016f6 <strTrim+0x48>
        } else {
            return;
 80016f4:	bf00      	nop
        }
    }
}
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <commandSepNameFromArg>:

static int32_t commandSepNameFromArg(const char * const commandNameWithArg) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
    const int32_t len = strlen(commandNameWithArg);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7fe fd7d 	bl	8000204 <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	60bb      	str	r3, [r7, #8]
    for (int32_t i = len - 1; i >= 0; i--) {
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	3b01      	subs	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e00a      	b.n	800172c <commandSepNameFromArg+0x30>
        if (commandNameWithArg[i] == ' ') {
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b20      	cmp	r3, #32
 8001720:	d101      	bne.n	8001726 <commandSepNameFromArg+0x2a>
            return i;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	e007      	b.n	8001736 <commandSepNameFromArg+0x3a>
    for (int32_t i = len - 1; i >= 0; i--) {
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3b01      	subs	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	daf1      	bge.n	8001716 <commandSepNameFromArg+0x1a>
        }
    }
    return -1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 fd9e 	bl	800231c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TIM6_DAC_IRQHandler+0x10>)
 80017ea:	f002 fabe 	bl	8003d6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000214 	.word	0x20000214

080017f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <USART6_IRQHandler+0x10>)
 80017fe:	f002 fec3 	bl	8004588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000026c 	.word	0x2000026c

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f003 fd94 	bl	8005368 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20030000 	.word	0x20030000
 800186c:	00000400 	.word	0x00000400
 8001870:	20000210 	.word	0x20000210
 8001874:	20000470 	.word	0x20000470

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <MX_TIM6_Init+0x64>)
 80018ac:	4a15      	ldr	r2, [pc, #84]	; (8001904 <MX_TIM6_Init+0x68>)
 80018ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <MX_TIM6_Init+0x64>)
 80018b2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80018b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_TIM6_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <MX_TIM6_Init+0x64>)
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_TIM6_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <MX_TIM6_Init+0x64>)
 80018ce:	f002 f95d 	bl	8003b8c <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80018d8:	f7ff fe43 	bl	8001562 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018e4:	463b      	mov	r3, r7
 80018e6:	4619      	mov	r1, r3
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_TIM6_Init+0x64>)
 80018ea:	f002 fc0f 	bl	800410c <HAL_TIMEx_MasterConfigSynchronization>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018f4:	f7ff fe35 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000214 	.word	0x20000214
 8001904:	40001000 	.word	0x40001000

08001908 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <HAL_TIM_Base_MspInit+0x48>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d115      	bne.n	8001946 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_TIM_Base_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a0c      	ldr	r2, [pc, #48]	; (8001954 <HAL_TIM_Base_MspInit+0x4c>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_TIM_Base_MspInit+0x4c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2036      	movs	r0, #54	; 0x36
 800193c:	f000 fe31 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001940:	2036      	movs	r0, #54	; 0x36
 8001942:	f000 fe4a 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40001000 	.word	0x40001000
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM6 ) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d102      	bne.n	8001970 <HAL_TIM_PeriodElapsedCallback+0x18>
		uartTransmitChar(X_C);
 800196a:	2043      	movs	r0, #67	; 0x43
 800196c:	f000 f8fe 	bl	8001b6c <uartTransmitChar>
	}
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40001000 	.word	0x40001000

0800197c <uartHardwareTransmitInterrupt>:

uint8_t uartHardwareTransmitPolling(const uint8_t data, const uint16_t timeOut) {
    return HAL_UART_Transmit(&huart6, &data, 1, timeOut) == HAL_OK;
}

void uartHardwareTransmitInterrupt(uint8_t buffer) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
	usartHardwareTransmitBuffer = buffer;
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <uartHardwareTransmitInterrupt+0x28>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 800198c:	2047      	movs	r0, #71	; 0x47
 800198e:	f000 fe24 	bl	80025da <HAL_NVIC_EnableIRQ>
	HAL_UART_Transmit_IT(&huart6, &usartHardwareTransmitBuffer, 1);
 8001992:	2201      	movs	r2, #1
 8001994:	4903      	ldr	r1, [pc, #12]	; (80019a4 <uartHardwareTransmitInterrupt+0x28>)
 8001996:	4804      	ldr	r0, [pc, #16]	; (80019a8 <uartHardwareTransmitInterrupt+0x2c>)
 8001998:	f002 fc95 	bl	80042c6 <HAL_UART_Transmit_IT>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000025c 	.word	0x2000025c
 80019a8:	2000026c 	.word	0x2000026c

080019ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_UART_TxCpltCallback+0x1c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d101      	bne.n	80019c0 <HAL_UART_TxCpltCallback+0x14>
		uartTransmitIntCallback();
 80019bc:	f000 f9b6 	bl	8001d2c <uartTransmitIntCallback>
	}
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000026c 	.word	0x2000026c

080019cc <uartHardwareReceiveInterrupt>:

uint8_t uartHardwareReceivePolling(uint8_t * const data, const uint16_t timeOut) {
    return HAL_UART_Receive(&huart6, data, 1, timeOut) == HAL_OK;
}

void uartHardwareReceiveInterrupt() {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80019d0:	2047      	movs	r0, #71	; 0x47
 80019d2:	f000 fe02 	bl	80025da <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart6, &usartHardwareReceiveBuffer, 1);
 80019d6:	2201      	movs	r2, #1
 80019d8:	4902      	ldr	r1, [pc, #8]	; (80019e4 <uartHardwareReceiveInterrupt+0x18>)
 80019da:	4803      	ldr	r0, [pc, #12]	; (80019e8 <uartHardwareReceiveInterrupt+0x1c>)
 80019dc:	f002 fcb8 	bl	8004350 <HAL_UART_Receive_IT>
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000025d 	.word	0x2000025d
 80019e8:	2000026c 	.word	0x2000026c

080019ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    if (huart == &huart6) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <HAL_UART_RxCpltCallback+0x24>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d104      	bne.n	8001a06 <HAL_UART_RxCpltCallback+0x1a>
    	uartReceiveIntCallback(usartHardwareReceiveBuffer);
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_UART_RxCpltCallback+0x28>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f965 	bl	8001cd0 <uartReceiveIntCallback>
    }
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000026c 	.word	0x2000026c
 8001a14:	2000025d 	.word	0x2000025d

08001a18 <uartHardwareDisableInterrupts>:

void uartHardwareDisableInterrupts() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart6);
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <uartHardwareDisableInterrupts+0x14>)
 8001a1e:	f002 fcc7 	bl	80043b0 <HAL_UART_Abort>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8001a22:	2047      	movs	r0, #71	; 0x47
 8001a24:	f000 fde7 	bl	80025f6 <HAL_NVIC_DisableIRQ>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000026c 	.word	0x2000026c

08001a30 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_USART6_UART_Init+0x50>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a68:	f002 fbe0 	bl	800422c <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a72:	f7ff fd76 	bl	8001562 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000026c 	.word	0x2000026c
 8001a80:	40011400 	.word	0x40011400

08001a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <HAL_UART_MspInit+0x94>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d133      	bne.n	8001b0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_UART_MspInit+0x98>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_UART_MspInit+0x98>)
 8001ab0:	f043 0320 	orr.w	r3, r3, #32
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_UART_MspInit+0x98>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_UART_MspInit+0x98>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_UART_MspInit+0x98>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_UART_MspInit+0x98>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ade:	23c0      	movs	r3, #192	; 0xc0
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001aee:	2308      	movs	r3, #8
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4809      	ldr	r0, [pc, #36]	; (8001b20 <HAL_UART_MspInit+0x9c>)
 8001afa:	f001 f93b 	bl	8002d74 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	2047      	movs	r0, #71	; 0x47
 8001b04:	f000 fd4d 	bl	80025a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001b08:	2047      	movs	r0, #71	; 0x47
 8001b0a:	f000 fd66 	bl	80025da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40011400 	.word	0x40011400
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020800 	.word	0x40020800

08001b24 <uartTransmit>:
  }
}

/* USER CODE BEGIN 1 */

uint16_t uartTransmit(const uint8_t * const msg, const uint16_t msgSize) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
    if (msg == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <uartTransmit+0x16>
        return 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e010      	b.n	8001b5c <uartTransmit+0x38>
    const uint16_t transmitted = bufferPushValues(txBuffer, msg, msgSize);
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <uartTransmit+0x40>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe ff82 	bl	8000a4c <bufferPushValues>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <uartTransmit+0x44>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <uartTransmit+0x36>
        hardwareTransmitIT();
 8001b56:	f000 f893 	bl	8001c80 <hardwareTransmitIT>
    }
    return transmitted;
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000260 	.word	0x20000260
 8001b68:	20000268 	.word	0x20000268

08001b6c <uartTransmitChar>:

uint8_t uartTransmitChar(const uint8_t msg) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
    if (msg == NULL)
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <uartTransmitChar+0x14>
        return 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e010      	b.n	8001ba2 <uartTransmitChar+0x36>
    const uint8_t transmitted = bufferPush(txBuffer, msg);
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <uartTransmitChar+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	79fa      	ldrb	r2, [r7, #7]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe ff2e 	bl	80009ea <bufferPush>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]
    if (interruptionsEnabled) {
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <uartTransmitChar+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <uartTransmitChar+0x34>
        hardwareTransmitIT();
 8001b9c:	f000 f870 	bl	8001c80 <hardwareTransmitIT>
    }
    return transmitted;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000260 	.word	0x20000260
 8001bb0:	20000268 	.word	0x20000268

08001bb4 <uartHasNext>:

uint8_t uartHasNext() {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
    return bufferHasValues(rxBuffer);
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <uartHasNext+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe ffaa 	bl	8000b16 <bufferHasValues>
 8001bc2:	4603      	mov	r3, r0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000264 	.word	0x20000264

08001bcc <uartInit>:

void uartInit() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
    txBuffer = bufferCreate(TX_BUFFER_SIZE);
 8001bd0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bd4:	f7fe feec 	bl	80009b0 <bufferCreate>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <uartInit+0x24>)
 8001bdc:	6013      	str	r3, [r2, #0]
    rxBuffer = bufferCreate(RX_BUFFER_SIZE);
 8001bde:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001be2:	f7fe fee5 	bl	80009b0 <bufferCreate>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4a02      	ldr	r2, [pc, #8]	; (8001bf4 <uartInit+0x28>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000260 	.word	0x20000260
 8001bf4:	20000264 	.word	0x20000264

08001bf8 <uartReceive>:
        hardwareTransmit();
        hardwareReceive();
    }
}

uint16_t uartReceive(uint8_t * const buffer, const uint16_t size) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
    const uint16_t received = bufferPopValues(rxBuffer, buffer, size);
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <uartReceive+0x38>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	887a      	ldrh	r2, [r7, #2]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe ff93 	bl	8000b38 <bufferPopValues>
 8001c12:	4603      	mov	r3, r0
 8001c14:	81fb      	strh	r3, [r7, #14]
    if (interruptionsEnabled) {
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <uartReceive+0x3c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <uartReceive+0x2c>
        hardwareReceiveIT();
 8001c20:	f000 f828 	bl	8001c74 <hardwareReceiveIT>
    }
    return received;
 8001c24:	89fb      	ldrh	r3, [r7, #14]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000264 	.word	0x20000264
 8001c34:	20000268 	.word	0x20000268

08001c38 <uartEnableInterruption>:

void uartEnableInterruption() {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
    interruptionsEnabled = 1;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <uartEnableInterruption+0x1c>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
    transmitIntEnd = 1;
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <uartEnableInterruption+0x20>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
    hardwareTransmitIT();
 8001c48:	f000 f81a 	bl	8001c80 <hardwareTransmitIT>
    hardwareReceiveIT();
 8001c4c:	f000 f812 	bl	8001c74 <hardwareReceiveIT>
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000268 	.word	0x20000268
 8001c58:	20000028 	.word	0x20000028

08001c5c <uartDisableInterruption>:

void uartDisableInterruption() {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    interruptionsEnabled = 0;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <uartDisableInterruption+0x14>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
    uartHardwareDisableInterrupts();
 8001c66:	f7ff fed7 	bl	8001a18 <uartHardwareDisableInterrupts>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000268 	.word	0x20000268

08001c74 <hardwareReceiveIT>:
    }
    if (!bufferHasValues(rxBuffer))
        bufferClear(rxBuffer);
}

static void hardwareReceiveIT() {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
    uartHardwareReceiveInterrupt();
 8001c78:	f7ff fea8 	bl	80019cc <uartHardwareReceiveInterrupt>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <hardwareTransmitIT>:

static void hardwareTransmitIT() {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
    if (!transmitIntEnd)
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <hardwareTransmitIT+0x48>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d016      	beq.n	8001cbe <hardwareTransmitIT+0x3e>
        return;

    if (bufferHasValues(txBuffer)) {
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <hardwareTransmitIT+0x4c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe ff3e 	bl	8000b16 <bufferHasValues>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00f      	beq.n	8001cc0 <hardwareTransmitIT+0x40>
        transmitIntEnd = 0;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <hardwareTransmitIT+0x48>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
        uint8_t data = bufferPop(txBuffer);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <hardwareTransmitIT+0x4c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fef1 	bl	8000a92 <bufferPop>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
        uartHardwareTransmitInterrupt(data);
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fe60 	bl	800197c <uartHardwareTransmitInterrupt>
 8001cbc:	e000      	b.n	8001cc0 <hardwareTransmitIT+0x40>
        return;
 8001cbe:	bf00      	nop
    }
}
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000028 	.word	0x20000028
 8001ccc:	20000260 	.word	0x20000260

08001cd0 <uartReceiveIntCallback>:
        if (uartHardwareTransmitPolling(byte, 5))
            bufferPop(txBuffer);
    }
}

extern void uartReceiveIntCallback(uint8_t data) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
    if (bufferGetFreeSize(rxBuffer) > 0) {
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <uartReceiveIntCallback+0x50>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe ff67 	bl	8000bb2 <bufferGetFreeSize>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <uartReceiveIntCallback+0x28>
        bufferPush(rxBuffer, data);
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <uartReceiveIntCallback+0x50>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	79fa      	ldrb	r2, [r7, #7]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fe79 	bl	80009ea <bufferPush>
    }
    if (!isRxStarted()) rxStarted = 1;
 8001cf8:	f000 f82a 	bl	8001d50 <isRxStarted>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <uartReceiveIntCallback+0x38>
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <uartReceiveIntCallback+0x54>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <uartReceiveIntCallback+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <uartReceiveIntCallback+0x46>
        hardwareReceiveIT();
 8001d12:	f7ff ffaf 	bl	8001c74 <hardwareReceiveIT>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000264 	.word	0x20000264
 8001d24:	20000269 	.word	0x20000269
 8001d28:	20000268 	.word	0x20000268

08001d2c <uartTransmitIntCallback>:

extern void uartTransmitIntCallback() {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
    transmitIntEnd = 1;
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <uartTransmitIntCallback+0x1c>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
    if (interruptionsEnabled)
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <uartTransmitIntCallback+0x20>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <uartTransmitIntCallback+0x18>
        hardwareTransmitIT();
 8001d40:	f7ff ff9e 	bl	8001c80 <hardwareTransmitIT>
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000028 	.word	0x20000028
 8001d4c:	20000268 	.word	0x20000268

08001d50 <isRxStarted>:

uint16_t rxBufToProgBuf(uint8_t* buf) {
	return bufferPopValues(rxBuffer, buf, bufferGetSize(rxBuffer));
}

uint8_t isRxStarted() {
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
	return rxStarted;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <isRxStarted+0x14>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000269 	.word	0x20000269

08001d68 <xmodemReceive>:
 * @brief   This function is the base of the Xmodem protocol.
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  uint8_t
 */
uint8_t xmodemReceive() {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
    volatile xmodem_status status = X_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	717b      	strb	r3, [r7, #5]
    uint8_t error_number = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	713b      	strb	r3, [r7, #4]
    uint8_t header = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	71fb      	strb	r3, [r7, #7]
    xmodemPacketNumber = 1u;
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <xmodemReceive+0x10c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim6); //send "C" every 10 sec
 8001d80:	483d      	ldr	r0, [pc, #244]	; (8001e78 <xmodemReceive+0x110>)
 8001d82:	f001 ff53 	bl	8003c2c <HAL_TIM_Base_Start_IT>
    timerWorking = 1;
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <xmodemReceive+0x114>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
    /* Loop until there isn't any error or done. */
    while (status == X_OK) {
 8001d8c:	e05d      	b.n	8001e4a <xmodemReceive+0xe2>
  	    WRITE_REG(IWDG->KR, 0x0000AAAAU);
 8001d8e:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <xmodemReceive+0x118>)
 8001d90:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d94:	601a      	str	r2, [r3, #0]
	    xmodemBufSize = uartReceive(xmodemBuf, 1);
 8001d96:	2101      	movs	r1, #1
 8001d98:	483a      	ldr	r0, [pc, #232]	; (8001e84 <xmodemReceive+0x11c>)
 8001d9a:	f7ff ff2d 	bl	8001bf8 <uartReceive>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <xmodemReceive+0x120>)
 8001da4:	801a      	strh	r2, [r3, #0]
	    if (xmodemBufSize != 1) continue;
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <xmodemReceive+0x120>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d000      	beq.n	8001db0 <xmodemReceive+0x48>
 8001dae:	e04c      	b.n	8001e4a <xmodemReceive+0xe2>
	    if (timerWorking) {
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <xmodemReceive+0x114>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <xmodemReceive+0x5c>
	    	HAL_TIM_Base_Stop_IT(&htim6); //stop sending "C"
 8001db8:	482f      	ldr	r0, [pc, #188]	; (8001e78 <xmodemReceive+0x110>)
 8001dba:	f001 ffa7 	bl	8003d0c <HAL_TIM_Base_Stop_IT>
	    	timerWorking = 0;
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <xmodemReceive+0x114>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
	    }
    	HAL_Delay(100);
 8001dc4:	2064      	movs	r0, #100	; 0x64
 8001dc6:	f000 fac9 	bl	800235c <HAL_Delay>
        header = xmodemBuf[0];
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <xmodemReceive+0x11c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]

        xmodem_status packet_status = X_ERROR;
 8001dd0:	23ff      	movs	r3, #255	; 0xff
 8001dd2:	71bb      	strb	r3, [r7, #6]
        /* The header can be: SOH, STX, EOT and CAN. */
        switch (header) {
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b18      	cmp	r3, #24
 8001dd8:	d02c      	beq.n	8001e34 <xmodemReceive+0xcc>
 8001dda:	2b18      	cmp	r3, #24
 8001ddc:	dc2d      	bgt.n	8001e3a <xmodemReceive+0xd2>
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d002      	beq.n	8001de8 <xmodemReceive+0x80>
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d020      	beq.n	8001e28 <xmodemReceive+0xc0>
 8001de6:	e028      	b.n	8001e3a <xmodemReceive+0xd2>
            case X_SOH:
                packet_status = xmodem_handle_packet(header); //If the handling was successful, then send an ACK
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f888 	bl	8001f00 <xmodem_handle_packet>
 8001df0:	4603      	mov	r3, r0
 8001df2:	71bb      	strb	r3, [r7, #6]
                if (packet_status == X_OK) {
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <xmodemReceive+0x9a>
                	uartTransmitChar(X_ACK);
 8001dfa:	2006      	movs	r0, #6
 8001dfc:	f7ff feb6 	bl	8001b6c <uartTransmitChar>
 8001e00:	e023      	b.n	8001e4a <xmodemReceive+0xe2>
                } else if (packet_status == X_WRONG_FIRMWARE) {
 8001e02:	79bb      	ldrb	r3, [r7, #6]
 8001e04:	2b78      	cmp	r3, #120	; 0x78
 8001e06:	d107      	bne.n	8001e18 <xmodemReceive+0xb0>
                	xmodem_error_handler(&error_number, 0);
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 f903 	bl	8002018 <xmodem_error_handler>
                	status = X_WRONG_FIRMWARE;
 8001e12:	2378      	movs	r3, #120	; 0x78
 8001e14:	717b      	strb	r3, [r7, #5]
 8001e16:	e018      	b.n	8001e4a <xmodemReceive+0xe2>
                } else {
                	status = xmodem_error_handler(&error_number, X_MAX_ERRORS); //Error while processing the packet, either send a NAK or do graceful abort
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f8fb 	bl	8002018 <xmodem_error_handler>
 8001e22:	4603      	mov	r3, r0
 8001e24:	717b      	strb	r3, [r7, #5]
                }
                break;
 8001e26:	e010      	b.n	8001e4a <xmodemReceive+0xe2>
            /* End of Transmission. */
            case X_EOT:
            	uartTransmitChar(X_ACK);
 8001e28:	2006      	movs	r0, #6
 8001e2a:	f7ff fe9f 	bl	8001b6c <uartTransmitChar>
            	status = X_DONE;
 8001e2e:	23aa      	movs	r3, #170	; 0xaa
 8001e30:	717b      	strb	r3, [r7, #5]
            	break;
 8001e32:	e00a      	b.n	8001e4a <xmodemReceive+0xe2>
            /* Abort from host. */
            case X_CAN:
           		status = X_ERROR;
 8001e34:	23ff      	movs	r3, #255	; 0xff
 8001e36:	717b      	strb	r3, [r7, #5]
           		break;
 8001e38:	e007      	b.n	8001e4a <xmodemReceive+0xe2>
            default:
            /* Wrong header. */
            	status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f8ea 	bl	8002018 <xmodem_error_handler>
 8001e44:	4603      	mov	r3, r0
 8001e46:	717b      	strb	r3, [r7, #5]
            	break;
 8001e48:	bf00      	nop
    while (status == X_OK) {
 8001e4a:	797b      	ldrb	r3, [r7, #5]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d09d      	beq.n	8001d8e <xmodemReceive+0x26>
        }
    }
    if (status == X_DONE) return 1;
 8001e52:	797b      	ldrb	r3, [r7, #5]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2baa      	cmp	r3, #170	; 0xaa
 8001e58:	d101      	bne.n	8001e5e <xmodemReceive+0xf6>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e006      	b.n	8001e6c <xmodemReceive+0x104>
    else if (status == X_WRONG_FIRMWARE) return 2;
 8001e5e:	797b      	ldrb	r3, [r7, #5]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b78      	cmp	r3, #120	; 0x78
 8001e64:	d101      	bne.n	8001e6a <xmodemReceive+0x102>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e000      	b.n	8001e6c <xmodemReceive+0x104>
    else return 0;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000029 	.word	0x20000029
 8001e78:	20000214 	.word	0x20000214
 8001e7c:	20000436 	.word	0x20000436
 8001e80:	40003000 	.word	0x40003000
 8001e84:	200002b0 	.word	0x200002b0
 8001e88:	200003b0 	.word	0x200003b0

08001e8c <xmodemCalcCrc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodemCalcCrc(uint8_t *data, uint16_t length)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	81fb      	strh	r3, [r7, #14]
    while (length)
 8001e9c:	e026      	b.n	8001eec <xmodemCalcCrc+0x60>
    {
        length--;
 8001e9e:	887b      	ldrh	r3, [r7, #2]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eb4:	4053      	eors	r3, r2
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	737b      	strb	r3, [r7, #13]
 8001ebe:	e012      	b.n	8001ee6 <xmodemCalcCrc+0x5a>
        {
            if (crc & 0x8000u)
 8001ec0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da08      	bge.n	8001eda <xmodemCalcCrc+0x4e>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8001ec8:	89fb      	ldrh	r3, [r7, #14]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001ed2:	f083 0301 	eor.w	r3, r3, #1
 8001ed6:	81fb      	strh	r3, [r7, #14]
 8001ed8:	e002      	b.n	8001ee0 <xmodemCalcCrc+0x54>
            }
            else
            {
                crc = crc << 1u;
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8001ee0:	7b7b      	ldrb	r3, [r7, #13]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	737b      	strb	r3, [r7, #13]
 8001ee6:	7b7b      	ldrb	r3, [r7, #13]
 8001ee8:	2b07      	cmp	r3, #7
 8001eea:	d9e9      	bls.n	8001ec0 <xmodemCalcCrc+0x34>
    while (length)
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1d5      	bne.n	8001e9e <xmodemCalcCrc+0x12>
            }
        }
    }
    return crc;
 8001ef2:	89fb      	ldrh	r3, [r7, #14]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <xmodem_handle_packet>:
/**
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b0a6      	sub	sp, #152	; 0x98
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
	uint8_t dataTempBuf[128];
	uint8_t crcBuf[2];
    uint16_t size = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

    /* Receive packet number */
    size = uartReceive(xmodemBuf, 2);
 8001f10:	2102      	movs	r1, #2
 8001f12:	483e      	ldr	r0, [pc, #248]	; (800200c <xmodem_handle_packet+0x10c>)
 8001f14:	f7ff fe70 	bl	8001bf8 <uartReceive>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 8001f1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d001      	beq.n	8001f2a <xmodem_handle_packet+0x2a>
    	return X_ERROR_UART;
 8001f26:	2304      	movs	r3, #4
 8001f28:	e06c      	b.n	8002004 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] != xmodemPacketNumber)
 8001f2a:	4b38      	ldr	r3, [pc, #224]	; (800200c <xmodem_handle_packet+0x10c>)
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	4b38      	ldr	r3, [pc, #224]	; (8002010 <xmodem_handle_packet+0x110>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <xmodem_handle_packet+0x3a>
    	return X_ERROR_NUMBER;
 8001f36:	2302      	movs	r3, #2
 8001f38:	e064      	b.n	8002004 <xmodem_handle_packet+0x104>
    if (xmodemBuf[0] + xmodemBuf[1] != 255)
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <xmodem_handle_packet+0x10c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b32      	ldr	r3, [pc, #200]	; (800200c <xmodem_handle_packet+0x10c>)
 8001f42:	785b      	ldrb	r3, [r3, #1]
 8001f44:	4413      	add	r3, r2
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d001      	beq.n	8001f4e <xmodem_handle_packet+0x4e>
    	return X_ERROR_NUMBER;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e05a      	b.n	8002004 <xmodem_handle_packet+0x104>

    /* Receive packet data */
    size = uartReceive(dataTempBuf, X_PACKET_128_SIZE);
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	2180      	movs	r1, #128	; 0x80
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fe4f 	bl	8001bf8 <uartReceive>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != X_PACKET_128_SIZE)
 8001f60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001f64:	2b80      	cmp	r3, #128	; 0x80
 8001f66:	d001      	beq.n	8001f6c <xmodem_handle_packet+0x6c>
    	return X_ERROR_UART;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e04b      	b.n	8002004 <xmodem_handle_packet+0x104>

    /* Receive CRC */
    size = uartReceive(crcBuf, 2);
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2102      	movs	r1, #2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fe40 	bl	8001bf8 <uartReceive>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    if (size != 2)
 8001f7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d001      	beq.n	8001f8a <xmodem_handle_packet+0x8a>
    	return X_ERROR_UART;
 8001f86:	2304      	movs	r3, #4
 8001f88:	e03c      	b.n	8002004 <xmodem_handle_packet+0x104>

    /* Check CRC */
    uint16_t crcMerged = ((uint16_t) crcBuf[0] << 8) | ((uint16_t) crcBuf[1]); //Merge the two bytes of CRC
 8001f8a:	7b3b      	ldrb	r3, [r7, #12]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	7b7b      	ldrb	r3, [r7, #13]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    uint16_t crcCalculated = xmodemCalcCrc(dataTempBuf, X_PACKET_128_SIZE);
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff72 	bl	8001e8c <xmodemCalcCrc>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    if (crcMerged != crcCalculated)
 8001fae:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8001fb2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <xmodem_handle_packet+0xbe>
    	return X_ERROR_CRC;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e022      	b.n	8002004 <xmodem_handle_packet+0x104>

    /* Add remaining data from previous packet to current data */
    addRemainingDataToCurrentBuf(dataTempBuf);
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f862 	bl	800208c <addRemainingDataToCurrentBuf>

    /* Remove unfinished line from xmodemBuf and place it to remaining data */
    cutBuf();
 8001fc8:	f000 f8aa 	bl	8002120 <cutBuf>

    /* Move data to flash */
    uint8_t flashHexCode = flashHex(xmodemBuf, xmodemBufSize);
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <xmodem_handle_packet+0x114>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480e      	ldr	r0, [pc, #56]	; (800200c <xmodem_handle_packet+0x10c>)
 8001fd4:	f7fe ffe4 	bl	8000fa0 <flashHex>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
    if (flashHexCode == 0)
 8001fde:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <xmodem_handle_packet+0xea>
    	return X_ERROR_FLASH;
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	e00c      	b.n	8002004 <xmodem_handle_packet+0x104>
    if (flashHexCode == 2)
 8001fea:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d101      	bne.n	8001ff6 <xmodem_handle_packet+0xf6>
    	return X_WRONG_FIRMWARE;
 8001ff2:	2378      	movs	r3, #120	; 0x78
 8001ff4:	e006      	b.n	8002004 <xmodem_handle_packet+0x104>

    xmodemPacketNumber++;
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <xmodem_handle_packet+0x110>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <xmodem_handle_packet+0x110>)
 8002000:	701a      	strb	r2, [r3, #0]
    return X_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3798      	adds	r7, #152	; 0x98
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	200002b0 	.word	0x200002b0
 8002010:	20000029 	.word	0x20000029
 8002014:	200003b0 	.word	0x200003b0

08002018 <xmodem_error_handler>:
 *          Raises the error counter, then if the number of the errors reached critical, do a graceful abort, otherwise send a NAK.
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
	xmodem_status status = X_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
	/* Raise the error counter. */
	(*error_number)++;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	b2da      	uxtb	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	701a      	strb	r2, [r3, #0]
	/* If the counter reached the max value, then abort. */
	if ((*error_number) >= max_error_number) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	429a      	cmp	r2, r3
 800203c:	d808      	bhi.n	8002050 <xmodem_error_handler+0x38>
		/* Graceful abort. */
		uartTransmitChar(X_CAN);
 800203e:	2018      	movs	r0, #24
 8002040:	f7ff fd94 	bl	8001b6c <uartTransmitChar>
		uartTransmitChar(X_CAN);
 8002044:	2018      	movs	r0, #24
 8002046:	f7ff fd91 	bl	8001b6c <uartTransmitChar>
		status = X_ERROR;
 800204a:	23ff      	movs	r3, #255	; 0xff
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e004      	b.n	800205a <xmodem_error_handler+0x42>
	} else { // Otherwise send a NAK for a repeat.
		uartTransmitChar(X_NAK);
 8002050:	2015      	movs	r0, #21
 8002052:	f7ff fd8b 	bl	8001b6c <uartTransmitChar>
		status = X_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
	}
	if (xmodemPacketNumber == 1 && status == X_OK) {
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <xmodem_error_handler+0x68>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d108      	bne.n	8002074 <xmodem_error_handler+0x5c>
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <xmodem_error_handler+0x5c>
		HAL_TIM_Base_Start_IT(&htim6);
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <xmodem_error_handler+0x6c>)
 800206a:	f001 fddf 	bl	8003c2c <HAL_TIM_Base_Start_IT>
		timerWorking = 1;
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <xmodem_error_handler+0x70>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000029 	.word	0x20000029
 8002084:	20000214 	.word	0x20000214
 8002088:	20000436 	.word	0x20000436

0800208c <addRemainingDataToCurrentBuf>:


void addRemainingDataToCurrentBuf(uint8_t* receivedData) {
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (remainingDataSize != 0) {
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <addRemainingDataToCurrentBuf+0x84>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d011      	beq.n	80020c0 <addRemainingDataToCurrentBuf+0x34>
		for (i = 0; i < remainingDataSize; i++) {
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e008      	b.n	80020b4 <addRemainingDataToCurrentBuf+0x28>
			xmodemBuf[i] = remainingDataBuf[i];
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	491b      	ldr	r1, [pc, #108]	; (8002114 <addRemainingDataToCurrentBuf+0x88>)
 80020a8:	5c89      	ldrb	r1, [r1, r2]
 80020aa:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <addRemainingDataToCurrentBuf+0x8c>)
 80020ac:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < remainingDataSize; i++) {
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	3301      	adds	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b15      	ldr	r3, [pc, #84]	; (8002110 <addRemainingDataToCurrentBuf+0x84>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3f0      	bcc.n	80020a2 <addRemainingDataToCurrentBuf+0x16>
		}
	}
	xmodemBufSize = remainingDataSize;
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <addRemainingDataToCurrentBuf+0x84>)
 80020c2:	881a      	ldrh	r2, [r3, #0]
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <addRemainingDataToCurrentBuf+0x90>)
 80020c6:	801a      	strh	r2, [r3, #0]
	remainingDataSize = 0;
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <addRemainingDataToCurrentBuf+0x84>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e00d      	b.n	80020f0 <addRemainingDataToCurrentBuf+0x64>
		xmodemBuf[xmodemBufSize + i] = receivedData[i];
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <addRemainingDataToCurrentBuf+0x90>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	4619      	mov	r1, r3
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	440b      	add	r3, r1
 80020e4:	7811      	ldrb	r1, [r2, #0]
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <addRemainingDataToCurrentBuf+0x8c>)
 80020e8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < X_PACKET_128_SIZE; i++) {
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	daed      	bge.n	80020d4 <addRemainingDataToCurrentBuf+0x48>
	}
	xmodemBufSize += X_PACKET_128_SIZE;
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <addRemainingDataToCurrentBuf+0x90>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	3380      	adds	r3, #128	; 0x80
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <addRemainingDataToCurrentBuf+0x90>)
 8002102:	801a      	strh	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000434 	.word	0x20000434
 8002114:	200003b4 	.word	0x200003b4
 8002118:	200002b0 	.word	0x200002b0
 800211c:	200003b0 	.word	0x200003b0

08002120 <cutBuf>:

void cutBuf() {
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t linePtr;

	for (i = xmodemBufSize - 1; i >= 0; i--) {
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <cutBuf+0x8c>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <cutBuf+0x90>)
 8002134:	5cd3      	ldrb	r3, [r2, r3]
 8002136:	2b0a      	cmp	r3, #10
 8002138:	d111      	bne.n	800215e <cutBuf+0x3e>
			linePtr = i;
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	71bb      	strb	r3, [r7, #6]
			break;
 800213e:	bf00      	nop
		}
	}
	remainingDataSize = xmodemBufSize - linePtr - 1;
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <cutBuf+0x8c>)
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	79bb      	ldrb	r3, [r7, #6]
 8002146:	b29b      	uxth	r3, r3
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <cutBuf+0x94>)
 8002152:	801a      	strh	r2, [r3, #0]
	if (remainingDataSize == 0) return;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <cutBuf+0x94>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d104      	bne.n	8002166 <cutBuf+0x46>
 800215c:	e020      	b.n	80021a0 <cutBuf+0x80>
	for (i = xmodemBufSize - 1; i >= 0; i--) {
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	3b01      	subs	r3, #1
 8002162:	71fb      	strb	r3, [r7, #7]
		if (xmodemBuf[i] == '\n') {
 8002164:	e7e4      	b.n	8002130 <cutBuf+0x10>
	xmodemBufSize -= remainingDataSize;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <cutBuf+0x8c>)
 8002168:	881a      	ldrh	r2, [r3, #0]
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <cutBuf+0x94>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <cutBuf+0x8c>)
 8002174:	801a      	strh	r2, [r3, #0]

	for (i = 0; i < remainingDataSize; i++) {
 8002176:	2300      	movs	r3, #0
 8002178:	71fb      	strb	r3, [r7, #7]
 800217a:	e00b      	b.n	8002194 <cutBuf+0x74>
		remainingDataBuf[i] = xmodemBuf[(linePtr + 1) + i];
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	441a      	add	r2, r3
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <cutBuf+0x90>)
 8002188:	5c89      	ldrb	r1, [r1, r2]
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <cutBuf+0x98>)
 800218c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < remainingDataSize; i++) {
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	3301      	adds	r3, #1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	b29a      	uxth	r2, r3
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <cutBuf+0x94>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3ed      	bcc.n	800217c <cutBuf+0x5c>
	}
}
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	200003b0 	.word	0x200003b0
 80021b0:	200002b0 	.word	0x200002b0
 80021b4:	20000434 	.word	0x20000434
 80021b8:	200003b4 	.word	0x200003b4

080021bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021c2:	490e      	ldr	r1, [pc, #56]	; (80021fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021c4:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c8:	e002      	b.n	80021d0 <LoopCopyDataInit>

080021ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ce:	3304      	adds	r3, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d4:	d3f9      	bcc.n	80021ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021d8:	4c0b      	ldr	r4, [pc, #44]	; (8002208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021dc:	e001      	b.n	80021e2 <LoopFillZerobss>

080021de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e0:	3204      	adds	r2, #4

080021e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021e6:	f7ff fb47 	bl	8001878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ea:	f003 f8c3 	bl	8005374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ee:	f7ff f823 	bl	8001238 <main>
  bx  lr    
 80021f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021fc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002200:	08006174 	.word	0x08006174
  ldr r2, =_sbss
 8002204:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002208:	2000046c 	.word	0x2000046c

0800220c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800220c:	e7fe      	b.n	800220c <ADC_IRQHandler>
	...

08002210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <HAL_Init+0x40>)
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_Init+0x40>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_Init+0x40>)
 8002232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002238:	2003      	movs	r0, #3
 800223a:	f000 f9a7 	bl	800258c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223e:	200f      	movs	r0, #15
 8002240:	f000 f83c 	bl	80022bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002244:	f7ff fa7c 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023c00 	.word	0x40023c00

08002254 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_DeInit+0x54>)
 800225a:	f04f 32ff 	mov.w	r2, #4294967295
 800225e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_DeInit+0x54>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_DeInit+0x54>)
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_DeInit+0x54>)
 8002270:	2200      	movs	r2, #0
 8002272:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_DeInit+0x54>)
 8002276:	f04f 32ff 	mov.w	r2, #4294967295
 800227a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_DeInit+0x54>)
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_DeInit+0x54>)
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <HAL_DeInit+0x54>)
 800228c:	2200      	movs	r2, #0
 800228e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_DeInit+0x54>)
 8002292:	f04f 32ff 	mov.w	r2, #4294967295
 8002296:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_DeInit+0x54>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800229e:	f000 f805 	bl	80022ac <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800

080022ac <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x54>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_InitTick+0x58>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f999 	bl	8002612 <HAL_SYSTICK_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00e      	b.n	8002308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d80a      	bhi.n	8002306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f000 f953 	bl	80025a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fc:	4a06      	ldr	r2, [pc, #24]	; (8002318 <HAL_InitTick+0x5c>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000024 	.word	0x20000024
 8002314:	20000030 	.word	0x20000030
 8002318:	2000002c 	.word	0x2000002c

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000030 	.word	0x20000030
 8002340:	20000438 	.word	0x20000438

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000438 	.word	0x20000438

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000030 	.word	0x20000030

080023a4 <__NVIC_SetPriorityGrouping>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4907      	ldr	r1, [pc, #28]	; (8002440 <__NVIC_EnableIRQ+0x38>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_DisableIRQ>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db12      	blt.n	800247c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	490a      	ldr	r1, [pc, #40]	; (8002488 <__NVIC_DisableIRQ+0x44>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	3320      	adds	r3, #32
 800246c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002470:	f3bf 8f4f 	dsb	sy
}
 8002474:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002476:	f3bf 8f6f 	isb	sy
}
 800247a:	bf00      	nop
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPriority>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db0a      	blt.n	80024b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	490c      	ldr	r1, [pc, #48]	; (80024d8 <__NVIC_SetPriority+0x4c>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	0112      	lsls	r2, r2, #4
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	440b      	add	r3, r1
 80024b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024b4:	e00a      	b.n	80024cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <__NVIC_SetPriority+0x50>)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	3b04      	subs	r3, #4
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	440b      	add	r3, r1
 80024ca:	761a      	strb	r2, [r3, #24]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <NVIC_EncodePriority>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f1c3 0307 	rsb	r3, r3, #7
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	bf28      	it	cs
 80024fe:	2304      	movcs	r3, #4
 8002500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3304      	adds	r3, #4
 8002506:	2b06      	cmp	r3, #6
 8002508:	d902      	bls.n	8002510 <NVIC_EncodePriority+0x30>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3b03      	subs	r3, #3
 800250e:	e000      	b.n	8002512 <NVIC_EncodePriority+0x32>
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002528:	f04f 31ff 	mov.w	r1, #4294967295
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43d9      	mvns	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	4313      	orrs	r3, r2
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002558:	d301      	bcc.n	800255e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <SysTick_Config+0x40>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002566:	210f      	movs	r1, #15
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f7ff ff8e 	bl	800248c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SysTick_Config+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SysTick_Config+0x40>)
 8002578:	2207      	movs	r2, #7
 800257a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010

0800258c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ff05 	bl	80023a4 <__NVIC_SetPriorityGrouping>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b4:	f7ff ff1a 	bl	80023ec <__NVIC_GetPriorityGrouping>
 80025b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7ff ff8e 	bl	80024e0 <NVIC_EncodePriority>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff5d 	bl	800248c <__NVIC_SetPriority>
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff0d 	bl	8002408 <__NVIC_EnableIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff1d 	bl	8002444 <__NVIC_DisableIRQ>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff94 	bl	8002548 <SysTick_Config>
 8002620:	4603      	mov	r3, r0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff fe84 	bl	8002344 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d008      	beq.n	800265c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e052      	b.n	8002702 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0216 	bic.w	r2, r2, #22
 800266a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800267a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <HAL_DMA_Abort+0x62>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0208 	bic.w	r2, r2, #8
 800269a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ac:	e013      	b.n	80026d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ae:	f7ff fe49 	bl	8002344 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d90c      	bls.n	80026d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2203      	movs	r2, #3
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e015      	b.n	8002702 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e4      	bne.n	80026ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	223f      	movs	r2, #63	; 0x3f
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d004      	beq.n	8002728 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e00c      	b.n	8002742 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2205      	movs	r2, #5
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800277a:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_FLASH_Program+0xa0>)
 800277c:	7e1b      	ldrb	r3, [r3, #24]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_FLASH_Program+0x1e>
 8002782:	2302      	movs	r3, #2
 8002784:	e03b      	b.n	80027fe <HAL_FLASH_Program+0x96>
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_FLASH_Program+0xa0>)
 8002788:	2201      	movs	r2, #1
 800278a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800278c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002790:	f000 f870 	bl	8002874 <FLASH_WaitForLastOperation>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d12b      	bne.n	80027f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80027a4:	783b      	ldrb	r3, [r7, #0]
 80027a6:	4619      	mov	r1, r3
 80027a8:	68b8      	ldr	r0, [r7, #8]
 80027aa:	f000 f91b 	bl	80029e4 <FLASH_Program_Byte>
 80027ae:	e016      	b.n	80027de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80027b6:	883b      	ldrh	r3, [r7, #0]
 80027b8:	4619      	mov	r1, r3
 80027ba:	68b8      	ldr	r0, [r7, #8]
 80027bc:	f000 f8ee 	bl	800299c <FLASH_Program_HalfWord>
 80027c0:	e00d      	b.n	80027de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d105      	bne.n	80027d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	68b8      	ldr	r0, [r7, #8]
 80027ce:	f000 f8c3 	bl	8002958 <FLASH_Program_Word>
 80027d2:	e004      	b.n	80027de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80027d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027d8:	68b8      	ldr	r0, [r7, #8]
 80027da:	f000 f88b 	bl	80028f4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027e2:	f000 f847 	bl	8002874 <FLASH_WaitForLastOperation>
 80027e6:	4603      	mov	r3, r0
 80027e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_FLASH_Program+0xa4>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4a07      	ldr	r2, [pc, #28]	; (800280c <HAL_FLASH_Program+0xa4>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <HAL_FLASH_Program+0xa0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000043c 	.word	0x2000043c
 800280c:	40023c00 	.word	0x40023c00

08002810 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_FLASH_Unlock+0x38>)
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	da0b      	bge.n	800283a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_FLASH_Unlock+0x38>)
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <HAL_FLASH_Unlock+0x3c>)
 8002826:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_FLASH_Unlock+0x38>)
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <HAL_FLASH_Unlock+0x40>)
 800282c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_FLASH_Unlock+0x38>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	da01      	bge.n	800283a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800283a:	79fb      	ldrb	r3, [r7, #7]
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40023c00 	.word	0x40023c00
 800284c:	45670123 	.word	0x45670123
 8002850:	cdef89ab 	.word	0xcdef89ab

08002854 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_FLASH_Lock+0x1c>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <HAL_FLASH_Lock+0x1c>)
 800285e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002862:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40023c00 	.word	0x40023c00

08002874 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <FLASH_WaitForLastOperation+0x78>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002886:	f7ff fd5d 	bl	8002344 <HAL_GetTick>
 800288a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800288c:	e010      	b.n	80028b0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d00c      	beq.n	80028b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <FLASH_WaitForLastOperation+0x38>
 800289c:	f7ff fd52 	bl	8002344 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d201      	bcs.n	80028b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e019      	b.n	80028e4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <FLASH_WaitForLastOperation+0x7c>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e8      	bne.n	800288e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <FLASH_WaitForLastOperation+0x7c>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <FLASH_WaitForLastOperation+0x7c>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <FLASH_WaitForLastOperation+0x7c>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80028da:	f000 f8a5 	bl	8002a28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
  
}  
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000043c 	.word	0x2000043c
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <FLASH_Program_DoubleWord+0x60>)
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4a13      	ldr	r2, [pc, #76]	; (8002954 <FLASH_Program_DoubleWord+0x60>)
 8002906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <FLASH_Program_DoubleWord+0x60>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	4a10      	ldr	r2, [pc, #64]	; (8002954 <FLASH_Program_DoubleWord+0x60>)
 8002912:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002916:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <FLASH_Program_DoubleWord+0x60>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <FLASH_Program_DoubleWord+0x60>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800292a:	f3bf 8f6f 	isb	sy
}
 800292e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	000a      	movs	r2, r1
 800293e:	2300      	movs	r3, #0
 8002940:	68f9      	ldr	r1, [r7, #12]
 8002942:	3104      	adds	r1, #4
 8002944:	4613      	mov	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40023c00 	.word	0x40023c00

08002958 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <FLASH_Program_Word+0x40>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	4a0c      	ldr	r2, [pc, #48]	; (8002998 <FLASH_Program_Word+0x40>)
 8002968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <FLASH_Program_Word+0x40>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <FLASH_Program_Word+0x40>)
 8002974:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002978:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <FLASH_Program_Word+0x40>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	4a06      	ldr	r2, [pc, #24]	; (8002998 <FLASH_Program_Word+0x40>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	601a      	str	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40023c00 	.word	0x40023c00

0800299c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <FLASH_Program_HalfWord+0x44>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	801a      	strh	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00

080029e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <FLASH_Program_Byte+0x40>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	4a0b      	ldr	r2, [pc, #44]	; (8002a24 <FLASH_Program_Byte+0x40>)
 80029f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <FLASH_Program_Byte+0x40>)
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <FLASH_Program_Byte+0x40>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <FLASH_Program_Byte+0x40>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4a06      	ldr	r2, [pc, #24]	; (8002a24 <FLASH_Program_Byte+0x40>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	701a      	strb	r2, [r3, #0]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40023c00 	.word	0x40023c00

08002a28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a38:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f043 0310 	orr.w	r3, r3, #16
 8002a40:	4a2b      	ldr	r2, [pc, #172]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002a42:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002a46:	2210      	movs	r2, #16
 8002a48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	4a24      	ldr	r2, [pc, #144]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002a60:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002a64:	2220      	movs	r2, #32
 8002a66:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002a7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002a80:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002a9c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d009      	beq.n	8002ac4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002aba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f043 0320 	orr.w	r3, r3, #32
 8002ad8:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <FLASH_SetErrorCode+0xc8>)
 8002ada:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <FLASH_SetErrorCode+0xc4>)
 8002ade:	2202      	movs	r2, #2
 8002ae0:	60da      	str	r2, [r3, #12]
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40023c00 	.word	0x40023c00
 8002af0:	2000043c 	.word	0x2000043c

08002af4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b06:	4b32      	ldr	r3, [pc, #200]	; (8002bd0 <HAL_FLASHEx_Erase+0xdc>)
 8002b08:	7e1b      	ldrb	r3, [r3, #24]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_FLASHEx_Erase+0x1e>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e05a      	b.n	8002bc8 <HAL_FLASHEx_Erase+0xd4>
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <HAL_FLASHEx_Erase+0xdc>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b1c:	f7ff feaa 	bl	8002874 <FLASH_WaitForLastOperation>
 8002b20:	4603      	mov	r3, r0
 8002b22:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d14a      	bne.n	8002bc0 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d117      	bne.n	8002b6a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 f846 	bl	8002bd8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b50:	f7ff fe90 	bl	8002874 <FLASH_WaitForLastOperation>
 8002b54:	4603      	mov	r3, r0
 8002b56:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002b58:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <HAL_FLASHEx_Erase+0xe0>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_FLASHEx_Erase+0xe0>)
 8002b5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	6113      	str	r3, [r2, #16]
 8002b68:	e028      	b.n	8002bbc <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	e01c      	b.n	8002bac <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	68b8      	ldr	r0, [r7, #8]
 8002b7c:	f000 f866 	bl	8002c4c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b84:	f7ff fe76 	bl	8002874 <FLASH_WaitForLastOperation>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_FLASHEx_Erase+0xe0>)
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_FLASHEx_Erase+0xe0>)
 8002b92:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002b96:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	601a      	str	r2, [r3, #0]
          break;
 8002ba4:	e00a      	b.n	8002bbc <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d3da      	bcc.n	8002b72 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002bbc:	f000 f894 	bl	8002ce8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_FLASHEx_Erase+0xdc>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	761a      	strb	r2, [r3, #24]

  return status;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	2000043c 	.word	0x2000043c
 8002bd4:	40023c00 	.word	0x40023c00

08002bd8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <FLASH_MassErase+0x70>)
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <FLASH_MassErase+0x70>)
 8002bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bee:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d108      	bne.n	8002c08 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <FLASH_MassErase+0x70>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <FLASH_MassErase+0x70>)
 8002bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6113      	str	r3, [r2, #16]
 8002c06:	e00f      	b.n	8002c28 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d106      	bne.n	8002c1c <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <FLASH_MassErase+0x70>)
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <FLASH_MassErase+0x70>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6113      	str	r3, [r2, #16]
 8002c1a:	e005      	b.n	8002c28 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <FLASH_MassErase+0x70>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <FLASH_MassErase+0x70>)
 8002c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c26:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <FLASH_MassErase+0x70>)
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	4313      	orrs	r3, r2
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <FLASH_MassErase+0x70>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6113      	str	r3, [r2, #16]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00

08002c4c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e010      	b.n	8002c8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d103      	bne.n	8002c76 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e009      	b.n	8002c8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d103      	bne.n	8002c84 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e002      	b.n	8002c8a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002c84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b0b      	cmp	r3, #11
 8002c8e:	d902      	bls.n	8002c96 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	490f      	ldr	r1, [pc, #60]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002cb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <FLASH_Erase_Sector+0x98>)
 8002cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd6:	6113      	str	r3, [r2, #16]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40023c00 	.word	0x40023c00

08002ce8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002cec:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d017      	beq.n	8002d28 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002cfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d02:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d1a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a13      	ldr	r2, [pc, #76]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d26:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d017      	beq.n	8002d64 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d3e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <FLASH_FlushCaches+0x88>)
 8002d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d62:	6013      	str	r3, [r2, #0]
  }
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023c00 	.word	0x40023c00

08002d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e177      	b.n	8003080 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 8166 	bne.w	800307a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d005      	beq.n	8002dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d130      	bne.n	8002e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80c0 	beq.w	800307a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b66      	ldr	r3, [pc, #408]	; (8003098 <HAL_GPIO_Init+0x324>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a65      	ldr	r2, [pc, #404]	; (8003098 <HAL_GPIO_Init+0x324>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_GPIO_Init+0x324>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f16:	4a61      	ldr	r2, [pc, #388]	; (800309c <HAL_GPIO_Init+0x328>)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a58      	ldr	r2, [pc, #352]	; (80030a0 <HAL_GPIO_Init+0x32c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d037      	beq.n	8002fb2 <HAL_GPIO_Init+0x23e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a57      	ldr	r2, [pc, #348]	; (80030a4 <HAL_GPIO_Init+0x330>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d031      	beq.n	8002fae <HAL_GPIO_Init+0x23a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a56      	ldr	r2, [pc, #344]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d02b      	beq.n	8002faa <HAL_GPIO_Init+0x236>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a55      	ldr	r2, [pc, #340]	; (80030ac <HAL_GPIO_Init+0x338>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d025      	beq.n	8002fa6 <HAL_GPIO_Init+0x232>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a54      	ldr	r2, [pc, #336]	; (80030b0 <HAL_GPIO_Init+0x33c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01f      	beq.n	8002fa2 <HAL_GPIO_Init+0x22e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a53      	ldr	r2, [pc, #332]	; (80030b4 <HAL_GPIO_Init+0x340>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d019      	beq.n	8002f9e <HAL_GPIO_Init+0x22a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_GPIO_Init+0x344>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <HAL_GPIO_Init+0x226>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a51      	ldr	r2, [pc, #324]	; (80030bc <HAL_GPIO_Init+0x348>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00d      	beq.n	8002f96 <HAL_GPIO_Init+0x222>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a50      	ldr	r2, [pc, #320]	; (80030c0 <HAL_GPIO_Init+0x34c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d007      	beq.n	8002f92 <HAL_GPIO_Init+0x21e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4f      	ldr	r2, [pc, #316]	; (80030c4 <HAL_GPIO_Init+0x350>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <HAL_GPIO_Init+0x21a>
 8002f8a:	2309      	movs	r3, #9
 8002f8c:	e012      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f8e:	230a      	movs	r3, #10
 8002f90:	e010      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f92:	2308      	movs	r3, #8
 8002f94:	e00e      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f96:	2307      	movs	r3, #7
 8002f98:	e00c      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f9a:	2306      	movs	r3, #6
 8002f9c:	e00a      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	e008      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	e006      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e004      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e002      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_GPIO_Init+0x240>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	f002 0203 	and.w	r2, r2, #3
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	4093      	lsls	r3, r2
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc4:	4935      	ldr	r1, [pc, #212]	; (800309c <HAL_GPIO_Init+0x328>)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	3302      	adds	r3, #2
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fd2:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <HAL_GPIO_Init+0x354>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ff6:	4a34      	ldr	r2, [pc, #208]	; (80030c8 <HAL_GPIO_Init+0x354>)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ffc:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_GPIO_Init+0x354>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003020:	4a29      	ldr	r2, [pc, #164]	; (80030c8 <HAL_GPIO_Init+0x354>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003026:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_GPIO_Init+0x354>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800304a:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_GPIO_Init+0x354>)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_GPIO_Init+0x354>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003074:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <HAL_GPIO_Init+0x354>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3301      	adds	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	f67f ae84 	bls.w	8002d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	3724      	adds	r7, #36	; 0x24
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	40013800 	.word	0x40013800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40020400 	.word	0x40020400
 80030a8:	40020800 	.word	0x40020800
 80030ac:	40020c00 	.word	0x40020c00
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40021400 	.word	0x40021400
 80030b8:	40021800 	.word	0x40021800
 80030bc:	40021c00 	.word	0x40021c00
 80030c0:	40022000 	.word	0x40022000
 80030c4:	40022400 	.word	0x40022400
 80030c8:	40013c00 	.word	0x40013c00

080030cc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80030dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e267      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d075      	beq.n	80031f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b04      	cmp	r3, #4
 8003114:	d00c      	beq.n	8003130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b85      	ldr	r3, [pc, #532]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800311e:	2b08      	cmp	r3, #8
 8003120:	d112      	bne.n	8003148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003122:	4b82      	ldr	r3, [pc, #520]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800312e:	d10b      	bne.n	8003148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	4b7e      	ldr	r3, [pc, #504]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d05b      	beq.n	80031f4 <HAL_RCC_OscConfig+0x108>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d157      	bne.n	80031f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e242      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d106      	bne.n	8003160 <HAL_RCC_OscConfig+0x74>
 8003152:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a75      	ldr	r2, [pc, #468]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e01d      	b.n	800319c <HAL_RCC_OscConfig+0xb0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x98>
 800316a:	4b70      	ldr	r3, [pc, #448]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6f      	ldr	r2, [pc, #444]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a6c      	ldr	r2, [pc, #432]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800317c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0xb0>
 8003184:	4b69      	ldr	r3, [pc, #420]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a68      	ldr	r2, [pc, #416]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800318a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7ff f8ce 	bl	8002344 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ac:	f7ff f8ca 	bl	8002344 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e207      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	4b5b      	ldr	r3, [pc, #364]	; (800332c <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0xc0>
 80031ca:	e014      	b.n	80031f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7ff f8ba 	bl	8002344 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031d4:	f7ff f8b6 	bl	8002344 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1f3      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	4b51      	ldr	r3, [pc, #324]	; (800332c <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0xe8>
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d063      	beq.n	80032ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003202:	4b4a      	ldr	r3, [pc, #296]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003216:	2b08      	cmp	r3, #8
 8003218:	d11c      	bne.n	8003254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800321a:	4b44      	ldr	r3, [pc, #272]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d116      	bne.n	8003254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_RCC_OscConfig+0x152>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e1c7      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4937      	ldr	r1, [pc, #220]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003252:	e03a      	b.n	80032ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d020      	beq.n	800329e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325c:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_RCC_OscConfig+0x244>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7ff f86f 	bl	8002344 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326a:	f7ff f86b 	bl	8002344 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e1a8      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327c:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <HAL_RCC_OscConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4925      	ldr	r1, [pc, #148]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]
 800329c:	e015      	b.n	80032ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCC_OscConfig+0x244>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7ff f84e 	bl	8002344 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ac:	f7ff f84a 	bl	8002344 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e187      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d036      	beq.n	8003344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_RCC_OscConfig+0x248>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7ff f82e 	bl	8002344 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ec:	f7ff f82a 	bl	8002344 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e167      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_OscConfig+0x240>)
 8003300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x200>
 800330a:	e01b      	b.n	8003344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_OscConfig+0x248>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7ff f817 	bl	8002344 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	e00e      	b.n	8003338 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331a:	f7ff f813 	bl	8002344 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d907      	bls.n	8003338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e150      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
 800332c:	40023800 	.word	0x40023800
 8003330:	42470000 	.word	0x42470000
 8003334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	4b88      	ldr	r3, [pc, #544]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800333a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ea      	bne.n	800331a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8097 	beq.w	8003480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b81      	ldr	r3, [pc, #516]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10f      	bne.n	8003382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	4b7d      	ldr	r3, [pc, #500]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a7c      	ldr	r2, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b7a      	ldr	r3, [pc, #488]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b77      	ldr	r3, [pc, #476]	; (8003560 <HAL_RCC_OscConfig+0x474>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d118      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338e:	4b74      	ldr	r3, [pc, #464]	; (8003560 <HAL_RCC_OscConfig+0x474>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a73      	ldr	r2, [pc, #460]	; (8003560 <HAL_RCC_OscConfig+0x474>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fe ffd3 	bl	8002344 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fe ffcf 	bl	8002344 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e10c      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_OscConfig+0x474>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x2ea>
 80033c8:	4b64      	ldr	r3, [pc, #400]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a63      	ldr	r2, [pc, #396]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	e01c      	b.n	8003410 <HAL_RCC_OscConfig+0x324>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x30c>
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a5e      	ldr	r2, [pc, #376]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ea:	4b5c      	ldr	r3, [pc, #368]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a5b      	ldr	r2, [pc, #364]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0x324>
 80033f8:	4b58      	ldr	r3, [pc, #352]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a57      	ldr	r2, [pc, #348]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
 8003404:	4b55      	ldr	r3, [pc, #340]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a54      	ldr	r2, [pc, #336]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d015      	beq.n	8003444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003418:	f7fe ff94 	bl	8002344 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe ff90 	bl	8002344 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0cb      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003436:	4b49      	ldr	r3, [pc, #292]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ee      	beq.n	8003420 <HAL_RCC_OscConfig+0x334>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003444:	f7fe ff7e 	bl	8002344 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344a:	e00a      	b.n	8003462 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fe ff7a 	bl	8002344 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e0b5      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003462:	4b3e      	ldr	r3, [pc, #248]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ee      	bne.n	800344c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	4a38      	ldr	r2, [pc, #224]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800347a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a1 	beq.w	80035cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_OscConfig+0x470>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b08      	cmp	r3, #8
 8003494:	d05c      	beq.n	8003550 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d141      	bne.n	8003522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b31      	ldr	r3, [pc, #196]	; (8003564 <HAL_RCC_OscConfig+0x478>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe ff4e 	bl	8002344 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe ff4a 	bl	8002344 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e087      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	019b      	lsls	r3, r3, #6
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	3b01      	subs	r3, #1
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	491b      	ldr	r1, [pc, #108]	; (800355c <HAL_RCC_OscConfig+0x470>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_RCC_OscConfig+0x478>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fe ff23 	bl	8002344 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003502:	f7fe ff1f 	bl	8002344 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e05c      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x416>
 8003520:	e054      	b.n	80035cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <HAL_RCC_OscConfig+0x478>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe ff0c 	bl	8002344 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003530:	f7fe ff08 	bl	8002344 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e045      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <HAL_RCC_OscConfig+0x470>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x444>
 800354e:	e03d      	b.n	80035cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e038      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
 800355c:	40023800 	.word	0x40023800
 8003560:	40007000 	.word	0x40007000
 8003564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x4ec>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d028      	beq.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d121      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d11a      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800359e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d111      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	3b01      	subs	r3, #1
 80035b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0cc      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b68      	ldr	r3, [pc, #416]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d90c      	bls.n	8003618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b63      	ldr	r3, [pc, #396]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0b8      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a58      	ldr	r2, [pc, #352]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800363a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003648:	4b53      	ldr	r3, [pc, #332]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a52      	ldr	r2, [pc, #328]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003654:	4b50      	ldr	r3, [pc, #320]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	494d      	ldr	r1, [pc, #308]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d044      	beq.n	80036fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b47      	ldr	r3, [pc, #284]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d119      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e07f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d003      	beq.n	800369a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003696:	2b03      	cmp	r3, #3
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369a:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e06f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e067      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ba:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4934      	ldr	r1, [pc, #208]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036cc:	f7fe fe3a 	bl	8002344 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fe fe36 	bl	8002344 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e04f      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 020c 	and.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1eb      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d20c      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b22      	ldr	r3, [pc, #136]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_ClockConfig+0x1b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e032      	b.n	800378a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003730:	4b19      	ldr	r3, [pc, #100]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4916      	ldr	r1, [pc, #88]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	490e      	ldr	r1, [pc, #56]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003762:	f000 f821 	bl	80037a8 <HAL_RCC_GetSysClockFreq>
 8003766:	4602      	mov	r2, r0
 8003768:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	490a      	ldr	r1, [pc, #40]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	5ccb      	ldrb	r3, [r1, r3]
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fd9a 	bl	80022bc <HAL_InitTick>

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023c00 	.word	0x40023c00
 8003798:	40023800 	.word	0x40023800
 800379c:	08006018 	.word	0x08006018
 80037a0:	20000024 	.word	0x20000024
 80037a4:	2000002c 	.word	0x2000002c

080037a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ac:	b090      	sub	sp, #64	; 0x40
 80037ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
 80037b4:	2300      	movs	r3, #0
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b8:	2300      	movs	r3, #0
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037c0:	4b59      	ldr	r3, [pc, #356]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d00d      	beq.n	80037e8 <HAL_RCC_GetSysClockFreq+0x40>
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	f200 80a1 	bhi.w	8003914 <HAL_RCC_GetSysClockFreq+0x16c>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x34>
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037da:	e09b      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCC_GetSysClockFreq+0x184>)
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037e0:	e09b      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037e2:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_GetSysClockFreq+0x188>)
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037e6:	e098      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e8:	4b4f      	ldr	r3, [pc, #316]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037f2:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d028      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	099b      	lsrs	r3, r3, #6
 8003804:	2200      	movs	r2, #0
 8003806:	623b      	str	r3, [r7, #32]
 8003808:	627a      	str	r2, [r7, #36]	; 0x24
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003810:	2100      	movs	r1, #0
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_GetSysClockFreq+0x188>)
 8003814:	fb03 f201 	mul.w	r2, r3, r1
 8003818:	2300      	movs	r3, #0
 800381a:	fb00 f303 	mul.w	r3, r0, r3
 800381e:	4413      	add	r3, r2
 8003820:	4a43      	ldr	r2, [pc, #268]	; (8003930 <HAL_RCC_GetSysClockFreq+0x188>)
 8003822:	fba0 1202 	umull	r1, r2, r0, r2
 8003826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003828:	460a      	mov	r2, r1
 800382a:	62ba      	str	r2, [r7, #40]	; 0x28
 800382c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800382e:	4413      	add	r3, r2
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003834:	2200      	movs	r2, #0
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	61fa      	str	r2, [r7, #28]
 800383a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800383e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003842:	f7fc fd3d 	bl	80002c0 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4613      	mov	r3, r2
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384e:	e053      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003850:	4b35      	ldr	r3, [pc, #212]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	2200      	movs	r2, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	617a      	str	r2, [r7, #20]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003862:	f04f 0b00 	mov.w	fp, #0
 8003866:	4652      	mov	r2, sl
 8003868:	465b      	mov	r3, fp
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	0159      	lsls	r1, r3, #5
 8003874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003878:	0150      	lsls	r0, r2, #5
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	ebb2 080a 	subs.w	r8, r2, sl
 8003882:	eb63 090b 	sbc.w	r9, r3, fp
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003892:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003896:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800389a:	ebb2 0408 	subs.w	r4, r2, r8
 800389e:	eb63 0509 	sbc.w	r5, r3, r9
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	00eb      	lsls	r3, r5, #3
 80038ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038b0:	00e2      	lsls	r2, r4, #3
 80038b2:	4614      	mov	r4, r2
 80038b4:	461d      	mov	r5, r3
 80038b6:	eb14 030a 	adds.w	r3, r4, sl
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	eb45 030b 	adc.w	r3, r5, fp
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ce:	4629      	mov	r1, r5
 80038d0:	028b      	lsls	r3, r1, #10
 80038d2:	4621      	mov	r1, r4
 80038d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d8:	4621      	mov	r1, r4
 80038da:	028a      	lsls	r2, r1, #10
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e2:	2200      	movs	r2, #0
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	60fa      	str	r2, [r7, #12]
 80038e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ec:	f7fc fce8 	bl	80002c0 <__aeabi_uldivmod>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4613      	mov	r3, r2
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_GetSysClockFreq+0x180>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	3301      	adds	r3, #1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003912:	e002      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCC_GetSysClockFreq+0x184>)
 8003916:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800391c:	4618      	mov	r0, r3
 800391e:	3740      	adds	r7, #64	; 0x40
 8003920:	46bd      	mov	sp, r7
 8003922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	00f42400 	.word	0x00f42400
 8003930:	017d7840 	.word	0x017d7840

08003934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_RCC_GetHCLKFreq+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000024 	.word	0x20000024

0800394c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003950:	f7ff fff0 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	0a9b      	lsrs	r3, r3, #10
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	08006028 	.word	0x08006028

08003974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003978:	f7ff ffdc 	bl	8003934 <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	0b5b      	lsrs	r3, r3, #13
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	08006028 	.word	0x08006028

0800399c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80039a2:	f7fe fccf 	bl	8002344 <HAL_GetTick>
 80039a6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80039a8:	4b72      	ldr	r3, [pc, #456]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a71      	ldr	r2, [pc, #452]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fe fcc5 	bl	8002344 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e0d0      	b.n	8003b6a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80039d4:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 80039da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80039e0:	f7fe fcb0 	bl	8002344 <HAL_GetTick>
 80039e4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80039e6:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ee:	f7fe fca9 	bl	8002344 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e0b2      	b.n	8003b6a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003a04:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 030c 	and.w	r3, r3, #12
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ee      	bne.n	80039ee <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a10:	f7fe fc98 	bl	8002344 <HAL_GetTick>
 8003a14:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003a16:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a56      	ldr	r2, [pc, #344]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a1c:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003a20:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe fc8e 	bl	8002344 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e099      	b.n	8003b6a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003a36:	4b4f      	ldr	r3, [pc, #316]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a42:	f7fe fc7f 	bl	8002344 <HAL_GetTick>
 8003a46:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003a48:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a49      	ldr	r2, [pc, #292]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a52:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a56:	f7fe fc75 	bl	8002344 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e080      	b.n	8003b6a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003a68:	4b42      	ldr	r3, [pc, #264]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a74:	f7fe fc66 	bl	8002344 <HAL_GetTick>
 8003a78:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a3d      	ldr	r2, [pc, #244]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a84:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a88:	f7fe fc5c 	bl	8002344 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e067      	b.n	8003b6a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003a9a:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003aa6:	f7fe fc4d 	bl	8002344 <HAL_GetTick>
 8003aaa:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a30      	ldr	r2, [pc, #192]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003aba:	f7fe fc43 	bl	8002344 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e04e      	b.n	8003b6a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003ad8:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003ada:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <HAL_RCC_DeInit+0x1dc>)
 8003adc:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003ade:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003ae0:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_RCC_DeInit+0x1e0>)
 8003ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8003ae6:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003ae8:	4a24      	ldr	r2, [pc, #144]	; (8003b7c <HAL_RCC_DeInit+0x1e0>)
 8003aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003aee:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003af4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003af8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b04:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8003b06:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b18:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003b1c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003b1e:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b34:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003b36:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b46:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <HAL_RCC_DeInit+0x1d8>)
 8003b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <HAL_RCC_DeInit+0x1e4>)
 8003b50:	4a0c      	ldr	r2, [pc, #48]	; (8003b84 <HAL_RCC_DeInit+0x1e8>)
 8003b52:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_RCC_DeInit+0x1ec>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe fbaf 	bl	80022bc <HAL_InitTick>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
  }
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	04003010 	.word	0x04003010
 8003b7c:	24003000 	.word	0x24003000
 8003b80:	20000024 	.word	0x20000024
 8003b84:	00f42400 	.word	0x00f42400
 8003b88:	2000002c 	.word	0x2000002c

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e041      	b.n	8003c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd fea8 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 f9fe 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d001      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e04e      	b.n	8003ce2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d022      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6e:	d01d      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d018      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1c      	ldr	r2, [pc, #112]	; (8003cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d00e      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d009      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a19      	ldr	r2, [pc, #100]	; (8003d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x80>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d111      	bne.n	8003cd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d010      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cce:	e007      	b.n	8003ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40000400 	.word	0x40000400
 8003cf8:	40000800 	.word	0x40000800
 8003cfc:	40000c00 	.word	0x40000c00
 8003d00:	40010400 	.word	0x40010400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40001800 	.word	0x40001800

08003d0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10f      	bne.n	8003d54 <HAL_TIM_Base_Stop_IT+0x48>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a1a      	ldr	r2, [r3, #32]
 8003d3a:	f240 4344 	movw	r3, #1092	; 0x444
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_Base_Stop_IT+0x48>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d122      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d11b      	bne.n	8003dc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f06f 0202 	mvn.w	r2, #2
 8003d96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f8ee 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003db2:	e005      	b.n	8003dc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f8e0 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f8f1 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d122      	bne.n	8003e1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d11b      	bne.n	8003e1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0204 	mvn.w	r2, #4
 8003dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8c4 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003e06:	e005      	b.n	8003e14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f8b6 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8c7 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d122      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11b      	bne.n	8003e6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f06f 0208 	mvn.w	r2, #8
 8003e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2204      	movs	r2, #4
 8003e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f89a 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003e5a:	e005      	b.n	8003e68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f88c 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f89d 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d122      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d11b      	bne.n	8003ec2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f06f 0210 	mvn.w	r2, #16
 8003e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2208      	movs	r2, #8
 8003e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f870 	bl	8003f8e <HAL_TIM_IC_CaptureCallback>
 8003eae:	e005      	b.n	8003ebc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f862 	bl	8003f7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f873 	bl	8003fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10e      	bne.n	8003eee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d107      	bne.n	8003eee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f06f 0201 	mvn.w	r2, #1
 8003ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7fd fd35 	bl	8001958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d10e      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d107      	bne.n	8003f1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f97f 	bl	8004218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d10e      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d107      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f838 	bl	8003fb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0220 	mvn.w	r2, #32
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f949 	bl	8004204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d013      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fea:	d00f      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3d      	ldr	r2, [pc, #244]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3a      	ldr	r2, [pc, #232]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2f      	ldr	r2, [pc, #188]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d02b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402c:	d027      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2c      	ldr	r2, [pc, #176]	; (80040e4 <TIM_Base_SetConfig+0x118>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d023      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2b      	ldr	r2, [pc, #172]	; (80040e8 <TIM_Base_SetConfig+0x11c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <TIM_Base_SetConfig+0x120>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d017      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a28      	ldr	r2, [pc, #160]	; (80040f4 <TIM_Base_SetConfig+0x128>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a27      	ldr	r2, [pc, #156]	; (80040f8 <TIM_Base_SetConfig+0x12c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <TIM_Base_SetConfig+0x130>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <TIM_Base_SetConfig+0x134>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a24      	ldr	r2, [pc, #144]	; (8004104 <TIM_Base_SetConfig+0x138>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a23      	ldr	r2, [pc, #140]	; (8004108 <TIM_Base_SetConfig+0x13c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d108      	bne.n	8004090 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <TIM_Base_SetConfig+0x114>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0xf8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <TIM_Base_SetConfig+0x124>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d103      	bne.n	80040cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	615a      	str	r2, [r3, #20]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800
 8004100:	40001800 	.word	0x40001800
 8004104:	40001c00 	.word	0x40001c00
 8004108:	40002000 	.word	0x40002000

0800410c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004120:	2302      	movs	r3, #2
 8004122:	e05a      	b.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d022      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004170:	d01d      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d018      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1a      	ldr	r2, [pc, #104]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00e      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a17      	ldr	r2, [pc, #92]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a15      	ldr	r2, [pc, #84]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10c      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40010400 	.word	0x40010400
 80041fc:	40014000 	.word	0x40014000
 8004200:	40001800 	.word	0x40001800

08004204 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e03f      	b.n	80042be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd fc16 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800426e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fe05 	bl	8004e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	4613      	mov	r3, r2
 80042d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d130      	bne.n	8004342 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_UART_Transmit_IT+0x26>
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e029      	b.n	8004344 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Transmit_IT+0x38>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e022      	b.n	8004344 <HAL_UART_Transmit_IT+0x7e>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2221      	movs	r2, #33	; 0x21
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800433c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
  }
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	4613      	mov	r3, r2
 800435c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b20      	cmp	r3, #32
 8004368:	d11d      	bne.n	80043a6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_UART_Receive_IT+0x26>
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e016      	b.n	80043a8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_UART_Receive_IT+0x38>
 8004384:	2302      	movs	r3, #2
 8004386:	e00f      	b.n	80043a8 <HAL_UART_Receive_IT+0x58>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	461a      	mov	r2, r3
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fb97 	bl	8004ad0 <UART_Start_Receive_IT>
 80043a2:	4603      	mov	r3, r0
 80043a4:	e000      	b.n	80043a8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b0a0      	sub	sp, #128	; 0x80
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80043c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ca:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80043ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80043d8:	66ba      	str	r2, [r7, #104]	; 0x68
 80043da:	667b      	str	r3, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80043de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80043e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e5      	bne.n	80043b8 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3314      	adds	r3, #20
 80043f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80043fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	67bb      	str	r3, [r7, #120]	; 0x78
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800440c:	657a      	str	r2, [r7, #84]	; 0x54
 800440e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004412:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800441a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	2b01      	cmp	r3, #1
 8004426:	d119      	bne.n	800445c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	f023 0310 	bic.w	r3, r3, #16
 800443e:	677b      	str	r3, [r7, #116]	; 0x74
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004448:	643a      	str	r2, [r7, #64]	; 0x40
 800444a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800444e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e5      	bne.n	8004428 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d136      	bne.n	80044d8 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3314      	adds	r3, #20
 8004470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	61fb      	str	r3, [r7, #28]
   return(result);
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004480:	673b      	str	r3, [r7, #112]	; 0x70
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3314      	adds	r3, #20
 8004488:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800448a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e5      	bne.n	800446a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	2200      	movs	r2, #0
 80044ac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe f8b9 	bl	800262a <HAL_DMA_Abort>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe f943 	bl	800274e <HAL_DMA_GetError>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d104      	bne.n	80044d8 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2210      	movs	r2, #16
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e052      	b.n	800457e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d136      	bne.n	8004554 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3314      	adds	r3, #20
 80044ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3314      	adds	r3, #20
 8004504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004506:	61ba      	str	r2, [r7, #24]
 8004508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	6979      	ldr	r1, [r7, #20]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	613b      	str	r3, [r7, #16]
   return(result);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e5      	bne.n	80044e6 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	2b00      	cmp	r3, #0
 8004520:	d018      	beq.n	8004554 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	2200      	movs	r2, #0
 8004528:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe f87b 	bl	800262a <HAL_DMA_Abort>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe f905 	bl	800274e <HAL_DMA_GetError>
 8004544:	4603      	mov	r3, r0
 8004546:	2b20      	cmp	r3, #32
 8004548:	d104      	bne.n	8004554 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2210      	movs	r2, #16
 800454e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e014      	b.n	800457e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3780      	adds	r7, #128	; 0x80
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b0ba      	sub	sp, #232	; 0xe8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_UART_IRQHandler+0x66>
 80045da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fb8f 	bl	8004d0a <UART_Receive_IT>
      return;
 80045ec:	e256      	b.n	8004a9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80de 	beq.w	80047b4 <HAL_UART_IRQHandler+0x22c>
 80045f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004608:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80d1 	beq.w	80047b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_UART_IRQHandler+0xae>
 800461e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0201 	orr.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_UART_IRQHandler+0xd2>
 8004642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f043 0202 	orr.w	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_UART_IRQHandler+0xf6>
 8004666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f043 0204 	orr.w	r2, r3, #4
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d011      	beq.n	80046ae <HAL_UART_IRQHandler+0x126>
 800468a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d105      	bne.n	80046a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f043 0208 	orr.w	r2, r3, #8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 81ed 	beq.w	8004a92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_UART_IRQHandler+0x14e>
 80046c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fb1a 	bl	8004d0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	bf0c      	ite	eq
 80046e4:	2301      	moveq	r3, #1
 80046e6:	2300      	movne	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <HAL_UART_IRQHandler+0x17a>
 80046fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d04f      	beq.n	80047a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fa22 	bl	8004b4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d141      	bne.n	800479a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800472c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3314      	adds	r3, #20
 800473e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800474e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800475a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1d9      	bne.n	8004716 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	2b00      	cmp	r3, #0
 8004768:	d013      	beq.n	8004792 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	4a7d      	ldr	r2, [pc, #500]	; (8004964 <HAL_UART_IRQHandler+0x3dc>)
 8004770:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd ffc7 	bl	800270a <HAL_DMA_Abort_IT>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d016      	beq.n	80047b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800478c:	4610      	mov	r0, r2
 800478e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004790:	e00e      	b.n	80047b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f986 	bl	8004aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	e00a      	b.n	80047b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f982 	bl	8004aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e006      	b.n	80047b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f97e 	bl	8004aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047ae:	e170      	b.n	8004a92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	bf00      	nop
    return;
 80047b2:	e16e      	b.n	8004a92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	f040 814a 	bne.w	8004a52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8143 	beq.w	8004a52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 813c 	beq.w	8004a52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	f040 80b4 	bne.w	8004968 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800480c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8140 	beq.w	8004a96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800481a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800481e:	429a      	cmp	r2, r3
 8004820:	f080 8139 	bcs.w	8004a96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800482a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004836:	f000 8088 	beq.w	800494a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800486a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800487e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1d9      	bne.n	800483a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3314      	adds	r3, #20
 800488c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3314      	adds	r3, #20
 80048a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e1      	bne.n	8004886 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3314      	adds	r3, #20
 80048c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3314      	adds	r3, #20
 80048e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e3      	bne.n	80048c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800491a:	f023 0310 	bic.w	r3, r3, #16
 800491e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800492c:	65ba      	str	r2, [r7, #88]	; 0x58
 800492e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004934:	e841 2300 	strex	r3, r2, [r1]
 8004938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800493a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1e3      	bne.n	8004908 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	4618      	mov	r0, r3
 8004946:	f7fd fe70 	bl	800262a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004952:	b29b      	uxth	r3, r3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	b29b      	uxth	r3, r3
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f8ac 	bl	8004ab8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004960:	e099      	b.n	8004a96 <HAL_UART_IRQHandler+0x50e>
 8004962:	bf00      	nop
 8004964:	08004c13 	.word	0x08004c13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004970:	b29b      	uxth	r3, r3
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 808b 	beq.w	8004a9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8086 	beq.w	8004a9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049b2:	647a      	str	r2, [r7, #68]	; 0x44
 80049b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e3      	bne.n	800498e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3314      	adds	r3, #20
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	623b      	str	r3, [r7, #32]
   return(result);
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3314      	adds	r3, #20
 80049e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049ea:	633a      	str	r2, [r7, #48]	; 0x30
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e3      	bne.n	80049c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0310 	bic.w	r3, r3, #16
 8004a22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a30:	61fa      	str	r2, [r7, #28]
 8004a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	69b9      	ldr	r1, [r7, #24]
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e3      	bne.n	8004a0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f834 	bl	8004ab8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a50:	e023      	b.n	8004a9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_UART_IRQHandler+0x4ea>
 8004a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8e5 	bl	8004c3a <UART_Transmit_IT>
    return;
 8004a70:	e014      	b.n	8004a9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00e      	beq.n	8004a9c <HAL_UART_IRQHandler+0x514>
 8004a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d008      	beq.n	8004a9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f925 	bl	8004cda <UART_EndTransmit_IT>
    return;
 8004a90:	e004      	b.n	8004a9c <HAL_UART_IRQHandler+0x514>
    return;
 8004a92:	bf00      	nop
 8004a94:	e002      	b.n	8004a9c <HAL_UART_IRQHandler+0x514>
      return;
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <HAL_UART_IRQHandler+0x514>
      return;
 8004a9a:	bf00      	nop
  }
}
 8004a9c:	37e8      	adds	r7, #232	; 0xe8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop

08004aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	4613      	mov	r3, r2
 8004adc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	88fa      	ldrh	r2, [r7, #6]
 8004ae8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2222      	movs	r2, #34	; 0x22
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0220 	orr.w	r2, r2, #32
 8004b3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b095      	sub	sp, #84	; 0x54
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b74:	643a      	str	r2, [r7, #64]	; 0x40
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e5      	bne.n	8004b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3314      	adds	r3, #20
 8004b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3314      	adds	r3, #20
 8004ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e5      	bne.n	8004b88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d119      	bne.n	8004bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f023 0310 	bic.w	r3, r3, #16
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004be4:	61ba      	str	r2, [r7, #24]
 8004be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6979      	ldr	r1, [r7, #20]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c06:	bf00      	nop
 8004c08:	3754      	adds	r7, #84	; 0x54
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f7ff ff39 	bl	8004aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b21      	cmp	r3, #33	; 0x21
 8004c4c:	d13e      	bne.n	8004ccc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	d114      	bne.n	8004c82 <UART_Transmit_IT+0x48>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d110      	bne.n	8004c82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	1c9a      	adds	r2, r3, #2
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	621a      	str	r2, [r3, #32]
 8004c80:	e008      	b.n	8004c94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6211      	str	r1, [r2, #32]
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10f      	bne.n	8004cc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	e000      	b.n	8004cce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ccc:	2302      	movs	r3, #2
  }
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc fe56 	bl	80019ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08c      	sub	sp, #48	; 0x30
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b22      	cmp	r3, #34	; 0x22
 8004d1c:	f040 80ab 	bne.w	8004e76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d117      	bne.n	8004d5a <UART_Receive_IT+0x50>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d113      	bne.n	8004d5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	1c9a      	adds	r2, r3, #2
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	629a      	str	r2, [r3, #40]	; 0x28
 8004d58:	e026      	b.n	8004da8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6c:	d007      	beq.n	8004d7e <UART_Receive_IT+0x74>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <UART_Receive_IT+0x82>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	e008      	b.n	8004d9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4619      	mov	r1, r3
 8004db6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d15a      	bne.n	8004e72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0220 	bic.w	r2, r2, #32
 8004dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d135      	bne.n	8004e68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	613b      	str	r3, [r7, #16]
   return(result);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f023 0310 	bic.w	r3, r3, #16
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e22:	623a      	str	r2, [r7, #32]
 8004e24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	69f9      	ldr	r1, [r7, #28]
 8004e28:	6a3a      	ldr	r2, [r7, #32]
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e5      	bne.n	8004e02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d10a      	bne.n	8004e5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fe29 	bl	8004ab8 <HAL_UARTEx_RxEventCallback>
 8004e66:	e002      	b.n	8004e6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fc fdbf 	bl	80019ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e002      	b.n	8004e78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e000      	b.n	8004e78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
  }
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3730      	adds	r7, #48	; 0x30
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e84:	b0c0      	sub	sp, #256	; 0x100
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	68d9      	ldr	r1, [r3, #12]
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	ea40 0301 	orr.w	r3, r0, r1
 8004ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ed8:	f021 010c 	bic.w	r1, r1, #12
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efa:	6999      	ldr	r1, [r3, #24]
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	ea40 0301 	orr.w	r3, r0, r1
 8004f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b8f      	ldr	r3, [pc, #572]	; (800514c <UART_SetConfig+0x2cc>)
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d005      	beq.n	8004f20 <UART_SetConfig+0xa0>
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b8d      	ldr	r3, [pc, #564]	; (8005150 <UART_SetConfig+0x2d0>)
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d104      	bne.n	8004f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f20:	f7fe fd28 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 8004f24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f28:	e003      	b.n	8004f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f2a:	f7fe fd0f 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 8004f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3c:	f040 810c 	bne.w	8005158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f52:	4622      	mov	r2, r4
 8004f54:	462b      	mov	r3, r5
 8004f56:	1891      	adds	r1, r2, r2
 8004f58:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f5a:	415b      	adcs	r3, r3
 8004f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f62:	4621      	mov	r1, r4
 8004f64:	eb12 0801 	adds.w	r8, r2, r1
 8004f68:	4629      	mov	r1, r5
 8004f6a:	eb43 0901 	adc.w	r9, r3, r1
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f82:	4690      	mov	r8, r2
 8004f84:	4699      	mov	r9, r3
 8004f86:	4623      	mov	r3, r4
 8004f88:	eb18 0303 	adds.w	r3, r8, r3
 8004f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f90:	462b      	mov	r3, r5
 8004f92:	eb49 0303 	adc.w	r3, r9, r3
 8004f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fae:	460b      	mov	r3, r1
 8004fb0:	18db      	adds	r3, r3, r3
 8004fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	eb42 0303 	adc.w	r3, r2, r3
 8004fba:	657b      	str	r3, [r7, #84]	; 0x54
 8004fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fc4:	f7fb f97c 	bl	80002c0 <__aeabi_uldivmod>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4b61      	ldr	r3, [pc, #388]	; (8005154 <UART_SetConfig+0x2d4>)
 8004fce:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	011c      	lsls	r4, r3, #4
 8004fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fe8:	4642      	mov	r2, r8
 8004fea:	464b      	mov	r3, r9
 8004fec:	1891      	adds	r1, r2, r2
 8004fee:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ff0:	415b      	adcs	r3, r3
 8004ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8004ffe:	4649      	mov	r1, r9
 8005000:	eb43 0b01 	adc.w	fp, r3, r1
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005018:	4692      	mov	sl, r2
 800501a:	469b      	mov	fp, r3
 800501c:	4643      	mov	r3, r8
 800501e:	eb1a 0303 	adds.w	r3, sl, r3
 8005022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005026:	464b      	mov	r3, r9
 8005028:	eb4b 0303 	adc.w	r3, fp, r3
 800502c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800503c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005044:	460b      	mov	r3, r1
 8005046:	18db      	adds	r3, r3, r3
 8005048:	643b      	str	r3, [r7, #64]	; 0x40
 800504a:	4613      	mov	r3, r2
 800504c:	eb42 0303 	adc.w	r3, r2, r3
 8005050:	647b      	str	r3, [r7, #68]	; 0x44
 8005052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800505a:	f7fb f931 	bl	80002c0 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4611      	mov	r1, r2
 8005064:	4b3b      	ldr	r3, [pc, #236]	; (8005154 <UART_SetConfig+0x2d4>)
 8005066:	fba3 2301 	umull	r2, r3, r3, r1
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2264      	movs	r2, #100	; 0x64
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	1acb      	subs	r3, r1, r3
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <UART_SetConfig+0x2d4>)
 800507c:	fba3 2302 	umull	r2, r3, r3, r2
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005088:	441c      	add	r4, r3
 800508a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005094:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	1891      	adds	r1, r2, r2
 80050a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80050a4:	415b      	adcs	r3, r3
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050ac:	4641      	mov	r1, r8
 80050ae:	1851      	adds	r1, r2, r1
 80050b0:	6339      	str	r1, [r7, #48]	; 0x30
 80050b2:	4649      	mov	r1, r9
 80050b4:	414b      	adcs	r3, r1
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050c4:	4659      	mov	r1, fp
 80050c6:	00cb      	lsls	r3, r1, #3
 80050c8:	4651      	mov	r1, sl
 80050ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ce:	4651      	mov	r1, sl
 80050d0:	00ca      	lsls	r2, r1, #3
 80050d2:	4610      	mov	r0, r2
 80050d4:	4619      	mov	r1, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	4642      	mov	r2, r8
 80050da:	189b      	adds	r3, r3, r2
 80050dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050e0:	464b      	mov	r3, r9
 80050e2:	460a      	mov	r2, r1
 80050e4:	eb42 0303 	adc.w	r3, r2, r3
 80050e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005100:	460b      	mov	r3, r1
 8005102:	18db      	adds	r3, r3, r3
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
 8005106:	4613      	mov	r3, r2
 8005108:	eb42 0303 	adc.w	r3, r2, r3
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800510e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005116:	f7fb f8d3 	bl	80002c0 <__aeabi_uldivmod>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <UART_SetConfig+0x2d4>)
 8005120:	fba3 1302 	umull	r1, r3, r3, r2
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	2164      	movs	r1, #100	; 0x64
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	3332      	adds	r3, #50	; 0x32
 8005132:	4a08      	ldr	r2, [pc, #32]	; (8005154 <UART_SetConfig+0x2d4>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	f003 0207 	and.w	r2, r3, #7
 800513e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4422      	add	r2, r4
 8005146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005148:	e105      	b.n	8005356 <UART_SetConfig+0x4d6>
 800514a:	bf00      	nop
 800514c:	40011000 	.word	0x40011000
 8005150:	40011400 	.word	0x40011400
 8005154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800515c:	2200      	movs	r2, #0
 800515e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005162:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800516a:	4642      	mov	r2, r8
 800516c:	464b      	mov	r3, r9
 800516e:	1891      	adds	r1, r2, r2
 8005170:	6239      	str	r1, [r7, #32]
 8005172:	415b      	adcs	r3, r3
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
 8005176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800517a:	4641      	mov	r1, r8
 800517c:	1854      	adds	r4, r2, r1
 800517e:	4649      	mov	r1, r9
 8005180:	eb43 0501 	adc.w	r5, r3, r1
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	00eb      	lsls	r3, r5, #3
 800518e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005192:	00e2      	lsls	r2, r4, #3
 8005194:	4614      	mov	r4, r2
 8005196:	461d      	mov	r5, r3
 8005198:	4643      	mov	r3, r8
 800519a:	18e3      	adds	r3, r4, r3
 800519c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051a0:	464b      	mov	r3, r9
 80051a2:	eb45 0303 	adc.w	r3, r5, r3
 80051a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051c6:	4629      	mov	r1, r5
 80051c8:	008b      	lsls	r3, r1, #2
 80051ca:	4621      	mov	r1, r4
 80051cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d0:	4621      	mov	r1, r4
 80051d2:	008a      	lsls	r2, r1, #2
 80051d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051d8:	f7fb f872 	bl	80002c0 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4b60      	ldr	r3, [pc, #384]	; (8005364 <UART_SetConfig+0x4e4>)
 80051e2:	fba3 2302 	umull	r2, r3, r3, r2
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	011c      	lsls	r4, r3, #4
 80051ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051fc:	4642      	mov	r2, r8
 80051fe:	464b      	mov	r3, r9
 8005200:	1891      	adds	r1, r2, r2
 8005202:	61b9      	str	r1, [r7, #24]
 8005204:	415b      	adcs	r3, r3
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800520c:	4641      	mov	r1, r8
 800520e:	1851      	adds	r1, r2, r1
 8005210:	6139      	str	r1, [r7, #16]
 8005212:	4649      	mov	r1, r9
 8005214:	414b      	adcs	r3, r1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005224:	4659      	mov	r1, fp
 8005226:	00cb      	lsls	r3, r1, #3
 8005228:	4651      	mov	r1, sl
 800522a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522e:	4651      	mov	r1, sl
 8005230:	00ca      	lsls	r2, r1, #3
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	4603      	mov	r3, r0
 8005238:	4642      	mov	r2, r8
 800523a:	189b      	adds	r3, r3, r2
 800523c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005240:	464b      	mov	r3, r9
 8005242:	460a      	mov	r2, r1
 8005244:	eb42 0303 	adc.w	r3, r2, r3
 8005248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	67bb      	str	r3, [r7, #120]	; 0x78
 8005256:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005264:	4649      	mov	r1, r9
 8005266:	008b      	lsls	r3, r1, #2
 8005268:	4641      	mov	r1, r8
 800526a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526e:	4641      	mov	r1, r8
 8005270:	008a      	lsls	r2, r1, #2
 8005272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005276:	f7fb f823 	bl	80002c0 <__aeabi_uldivmod>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4b39      	ldr	r3, [pc, #228]	; (8005364 <UART_SetConfig+0x4e4>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	; 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	3332      	adds	r3, #50	; 0x32
 8005292:	4a34      	ldr	r2, [pc, #208]	; (8005364 <UART_SetConfig+0x4e4>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800529e:	441c      	add	r4, r3
 80052a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a4:	2200      	movs	r2, #0
 80052a6:	673b      	str	r3, [r7, #112]	; 0x70
 80052a8:	677a      	str	r2, [r7, #116]	; 0x74
 80052aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052ae:	4642      	mov	r2, r8
 80052b0:	464b      	mov	r3, r9
 80052b2:	1891      	adds	r1, r2, r2
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	415b      	adcs	r3, r3
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052be:	4641      	mov	r1, r8
 80052c0:	1851      	adds	r1, r2, r1
 80052c2:	6039      	str	r1, [r7, #0]
 80052c4:	4649      	mov	r1, r9
 80052c6:	414b      	adcs	r3, r1
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052d6:	4659      	mov	r1, fp
 80052d8:	00cb      	lsls	r3, r1, #3
 80052da:	4651      	mov	r1, sl
 80052dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e0:	4651      	mov	r1, sl
 80052e2:	00ca      	lsls	r2, r1, #3
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	4603      	mov	r3, r0
 80052ea:	4642      	mov	r2, r8
 80052ec:	189b      	adds	r3, r3, r2
 80052ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80052f0:	464b      	mov	r3, r9
 80052f2:	460a      	mov	r2, r1
 80052f4:	eb42 0303 	adc.w	r3, r2, r3
 80052f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	663b      	str	r3, [r7, #96]	; 0x60
 8005304:	667a      	str	r2, [r7, #100]	; 0x64
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005312:	4649      	mov	r1, r9
 8005314:	008b      	lsls	r3, r1, #2
 8005316:	4641      	mov	r1, r8
 8005318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800531c:	4641      	mov	r1, r8
 800531e:	008a      	lsls	r2, r1, #2
 8005320:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005324:	f7fa ffcc 	bl	80002c0 <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <UART_SetConfig+0x4e4>)
 800532e:	fba3 1302 	umull	r1, r3, r3, r2
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2164      	movs	r1, #100	; 0x64
 8005336:	fb01 f303 	mul.w	r3, r1, r3
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	3332      	adds	r3, #50	; 0x32
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <UART_SetConfig+0x4e4>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	f003 020f 	and.w	r2, r3, #15
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4422      	add	r2, r4
 8005354:	609a      	str	r2, [r3, #8]
}
 8005356:	bf00      	nop
 8005358:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800535c:	46bd      	mov	sp, r7
 800535e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005362:	bf00      	nop
 8005364:	51eb851f 	.word	0x51eb851f

08005368 <__errno>:
 8005368:	4b01      	ldr	r3, [pc, #4]	; (8005370 <__errno+0x8>)
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20000034 	.word	0x20000034

08005374 <__libc_init_array>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4d0d      	ldr	r5, [pc, #52]	; (80053ac <__libc_init_array+0x38>)
 8005378:	4c0d      	ldr	r4, [pc, #52]	; (80053b0 <__libc_init_array+0x3c>)
 800537a:	1b64      	subs	r4, r4, r5
 800537c:	10a4      	asrs	r4, r4, #2
 800537e:	2600      	movs	r6, #0
 8005380:	42a6      	cmp	r6, r4
 8005382:	d109      	bne.n	8005398 <__libc_init_array+0x24>
 8005384:	4d0b      	ldr	r5, [pc, #44]	; (80053b4 <__libc_init_array+0x40>)
 8005386:	4c0c      	ldr	r4, [pc, #48]	; (80053b8 <__libc_init_array+0x44>)
 8005388:	f000 fd1a 	bl	8005dc0 <_init>
 800538c:	1b64      	subs	r4, r4, r5
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	2600      	movs	r6, #0
 8005392:	42a6      	cmp	r6, r4
 8005394:	d105      	bne.n	80053a2 <__libc_init_array+0x2e>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	f855 3b04 	ldr.w	r3, [r5], #4
 800539c:	4798      	blx	r3
 800539e:	3601      	adds	r6, #1
 80053a0:	e7ee      	b.n	8005380 <__libc_init_array+0xc>
 80053a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a6:	4798      	blx	r3
 80053a8:	3601      	adds	r6, #1
 80053aa:	e7f2      	b.n	8005392 <__libc_init_array+0x1e>
 80053ac:	0800616c 	.word	0x0800616c
 80053b0:	0800616c 	.word	0x0800616c
 80053b4:	0800616c 	.word	0x0800616c
 80053b8:	08006170 	.word	0x08006170

080053bc <malloc>:
 80053bc:	4b02      	ldr	r3, [pc, #8]	; (80053c8 <malloc+0xc>)
 80053be:	4601      	mov	r1, r0
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	f000 b877 	b.w	80054b4 <_malloc_r>
 80053c6:	bf00      	nop
 80053c8:	20000034 	.word	0x20000034

080053cc <memset>:
 80053cc:	4402      	add	r2, r0
 80053ce:	4603      	mov	r3, r0
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d100      	bne.n	80053d6 <memset+0xa>
 80053d4:	4770      	bx	lr
 80053d6:	f803 1b01 	strb.w	r1, [r3], #1
 80053da:	e7f9      	b.n	80053d0 <memset+0x4>

080053dc <_free_r>:
 80053dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053de:	2900      	cmp	r1, #0
 80053e0:	d044      	beq.n	800546c <_free_r+0x90>
 80053e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e6:	9001      	str	r0, [sp, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f1a1 0404 	sub.w	r4, r1, #4
 80053ee:	bfb8      	it	lt
 80053f0:	18e4      	addlt	r4, r4, r3
 80053f2:	f000 f987 	bl	8005704 <__malloc_lock>
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <_free_r+0x94>)
 80053f8:	9801      	ldr	r0, [sp, #4]
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	b933      	cbnz	r3, 800540c <_free_r+0x30>
 80053fe:	6063      	str	r3, [r4, #4]
 8005400:	6014      	str	r4, [r2, #0]
 8005402:	b003      	add	sp, #12
 8005404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005408:	f000 b982 	b.w	8005710 <__malloc_unlock>
 800540c:	42a3      	cmp	r3, r4
 800540e:	d908      	bls.n	8005422 <_free_r+0x46>
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	1961      	adds	r1, r4, r5
 8005414:	428b      	cmp	r3, r1
 8005416:	bf01      	itttt	eq
 8005418:	6819      	ldreq	r1, [r3, #0]
 800541a:	685b      	ldreq	r3, [r3, #4]
 800541c:	1949      	addeq	r1, r1, r5
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	e7ed      	b.n	80053fe <_free_r+0x22>
 8005422:	461a      	mov	r2, r3
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b10b      	cbz	r3, 800542c <_free_r+0x50>
 8005428:	42a3      	cmp	r3, r4
 800542a:	d9fa      	bls.n	8005422 <_free_r+0x46>
 800542c:	6811      	ldr	r1, [r2, #0]
 800542e:	1855      	adds	r5, r2, r1
 8005430:	42a5      	cmp	r5, r4
 8005432:	d10b      	bne.n	800544c <_free_r+0x70>
 8005434:	6824      	ldr	r4, [r4, #0]
 8005436:	4421      	add	r1, r4
 8005438:	1854      	adds	r4, r2, r1
 800543a:	42a3      	cmp	r3, r4
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	d1e0      	bne.n	8005402 <_free_r+0x26>
 8005440:	681c      	ldr	r4, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	6053      	str	r3, [r2, #4]
 8005446:	4421      	add	r1, r4
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	e7da      	b.n	8005402 <_free_r+0x26>
 800544c:	d902      	bls.n	8005454 <_free_r+0x78>
 800544e:	230c      	movs	r3, #12
 8005450:	6003      	str	r3, [r0, #0]
 8005452:	e7d6      	b.n	8005402 <_free_r+0x26>
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	1961      	adds	r1, r4, r5
 8005458:	428b      	cmp	r3, r1
 800545a:	bf04      	itt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	6063      	str	r3, [r4, #4]
 8005462:	bf04      	itt	eq
 8005464:	1949      	addeq	r1, r1, r5
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	6054      	str	r4, [r2, #4]
 800546a:	e7ca      	b.n	8005402 <_free_r+0x26>
 800546c:	b003      	add	sp, #12
 800546e:	bd30      	pop	{r4, r5, pc}
 8005470:	2000045c 	.word	0x2000045c

08005474 <sbrk_aligned>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4e0e      	ldr	r6, [pc, #56]	; (80054b0 <sbrk_aligned+0x3c>)
 8005478:	460c      	mov	r4, r1
 800547a:	6831      	ldr	r1, [r6, #0]
 800547c:	4605      	mov	r5, r0
 800547e:	b911      	cbnz	r1, 8005486 <sbrk_aligned+0x12>
 8005480:	f000 f88c 	bl	800559c <_sbrk_r>
 8005484:	6030      	str	r0, [r6, #0]
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f000 f887 	bl	800559c <_sbrk_r>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	d00a      	beq.n	80054a8 <sbrk_aligned+0x34>
 8005492:	1cc4      	adds	r4, r0, #3
 8005494:	f024 0403 	bic.w	r4, r4, #3
 8005498:	42a0      	cmp	r0, r4
 800549a:	d007      	beq.n	80054ac <sbrk_aligned+0x38>
 800549c:	1a21      	subs	r1, r4, r0
 800549e:	4628      	mov	r0, r5
 80054a0:	f000 f87c 	bl	800559c <_sbrk_r>
 80054a4:	3001      	adds	r0, #1
 80054a6:	d101      	bne.n	80054ac <sbrk_aligned+0x38>
 80054a8:	f04f 34ff 	mov.w	r4, #4294967295
 80054ac:	4620      	mov	r0, r4
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	20000460 	.word	0x20000460

080054b4 <_malloc_r>:
 80054b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b8:	1ccd      	adds	r5, r1, #3
 80054ba:	f025 0503 	bic.w	r5, r5, #3
 80054be:	3508      	adds	r5, #8
 80054c0:	2d0c      	cmp	r5, #12
 80054c2:	bf38      	it	cc
 80054c4:	250c      	movcc	r5, #12
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	4607      	mov	r7, r0
 80054ca:	db01      	blt.n	80054d0 <_malloc_r+0x1c>
 80054cc:	42a9      	cmp	r1, r5
 80054ce:	d905      	bls.n	80054dc <_malloc_r+0x28>
 80054d0:	230c      	movs	r3, #12
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	2600      	movs	r6, #0
 80054d6:	4630      	mov	r0, r6
 80054d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054dc:	4e2e      	ldr	r6, [pc, #184]	; (8005598 <_malloc_r+0xe4>)
 80054de:	f000 f911 	bl	8005704 <__malloc_lock>
 80054e2:	6833      	ldr	r3, [r6, #0]
 80054e4:	461c      	mov	r4, r3
 80054e6:	bb34      	cbnz	r4, 8005536 <_malloc_r+0x82>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	f7ff ffc2 	bl	8005474 <sbrk_aligned>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	4604      	mov	r4, r0
 80054f4:	d14d      	bne.n	8005592 <_malloc_r+0xde>
 80054f6:	6834      	ldr	r4, [r6, #0]
 80054f8:	4626      	mov	r6, r4
 80054fa:	2e00      	cmp	r6, #0
 80054fc:	d140      	bne.n	8005580 <_malloc_r+0xcc>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	4631      	mov	r1, r6
 8005502:	4638      	mov	r0, r7
 8005504:	eb04 0803 	add.w	r8, r4, r3
 8005508:	f000 f848 	bl	800559c <_sbrk_r>
 800550c:	4580      	cmp	r8, r0
 800550e:	d13a      	bne.n	8005586 <_malloc_r+0xd2>
 8005510:	6821      	ldr	r1, [r4, #0]
 8005512:	3503      	adds	r5, #3
 8005514:	1a6d      	subs	r5, r5, r1
 8005516:	f025 0503 	bic.w	r5, r5, #3
 800551a:	3508      	adds	r5, #8
 800551c:	2d0c      	cmp	r5, #12
 800551e:	bf38      	it	cc
 8005520:	250c      	movcc	r5, #12
 8005522:	4629      	mov	r1, r5
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ffa5 	bl	8005474 <sbrk_aligned>
 800552a:	3001      	adds	r0, #1
 800552c:	d02b      	beq.n	8005586 <_malloc_r+0xd2>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	442b      	add	r3, r5
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	e00e      	b.n	8005554 <_malloc_r+0xa0>
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	1b52      	subs	r2, r2, r5
 800553a:	d41e      	bmi.n	800557a <_malloc_r+0xc6>
 800553c:	2a0b      	cmp	r2, #11
 800553e:	d916      	bls.n	800556e <_malloc_r+0xba>
 8005540:	1961      	adds	r1, r4, r5
 8005542:	42a3      	cmp	r3, r4
 8005544:	6025      	str	r5, [r4, #0]
 8005546:	bf18      	it	ne
 8005548:	6059      	strne	r1, [r3, #4]
 800554a:	6863      	ldr	r3, [r4, #4]
 800554c:	bf08      	it	eq
 800554e:	6031      	streq	r1, [r6, #0]
 8005550:	5162      	str	r2, [r4, r5]
 8005552:	604b      	str	r3, [r1, #4]
 8005554:	4638      	mov	r0, r7
 8005556:	f104 060b 	add.w	r6, r4, #11
 800555a:	f000 f8d9 	bl	8005710 <__malloc_unlock>
 800555e:	f026 0607 	bic.w	r6, r6, #7
 8005562:	1d23      	adds	r3, r4, #4
 8005564:	1af2      	subs	r2, r6, r3
 8005566:	d0b6      	beq.n	80054d6 <_malloc_r+0x22>
 8005568:	1b9b      	subs	r3, r3, r6
 800556a:	50a3      	str	r3, [r4, r2]
 800556c:	e7b3      	b.n	80054d6 <_malloc_r+0x22>
 800556e:	6862      	ldr	r2, [r4, #4]
 8005570:	42a3      	cmp	r3, r4
 8005572:	bf0c      	ite	eq
 8005574:	6032      	streq	r2, [r6, #0]
 8005576:	605a      	strne	r2, [r3, #4]
 8005578:	e7ec      	b.n	8005554 <_malloc_r+0xa0>
 800557a:	4623      	mov	r3, r4
 800557c:	6864      	ldr	r4, [r4, #4]
 800557e:	e7b2      	b.n	80054e6 <_malloc_r+0x32>
 8005580:	4634      	mov	r4, r6
 8005582:	6876      	ldr	r6, [r6, #4]
 8005584:	e7b9      	b.n	80054fa <_malloc_r+0x46>
 8005586:	230c      	movs	r3, #12
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4638      	mov	r0, r7
 800558c:	f000 f8c0 	bl	8005710 <__malloc_unlock>
 8005590:	e7a1      	b.n	80054d6 <_malloc_r+0x22>
 8005592:	6025      	str	r5, [r4, #0]
 8005594:	e7de      	b.n	8005554 <_malloc_r+0xa0>
 8005596:	bf00      	nop
 8005598:	2000045c 	.word	0x2000045c

0800559c <_sbrk_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d06      	ldr	r5, [pc, #24]	; (80055b8 <_sbrk_r+0x1c>)
 80055a0:	2300      	movs	r3, #0
 80055a2:	4604      	mov	r4, r0
 80055a4:	4608      	mov	r0, r1
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f7fc f930 	bl	800180c <_sbrk>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_sbrk_r+0x1a>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_sbrk_r+0x1a>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	20000464 	.word	0x20000464

080055bc <siprintf>:
 80055bc:	b40e      	push	{r1, r2, r3}
 80055be:	b500      	push	{lr}
 80055c0:	b09c      	sub	sp, #112	; 0x70
 80055c2:	ab1d      	add	r3, sp, #116	; 0x74
 80055c4:	9002      	str	r0, [sp, #8]
 80055c6:	9006      	str	r0, [sp, #24]
 80055c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055cc:	4809      	ldr	r0, [pc, #36]	; (80055f4 <siprintf+0x38>)
 80055ce:	9107      	str	r1, [sp, #28]
 80055d0:	9104      	str	r1, [sp, #16]
 80055d2:	4909      	ldr	r1, [pc, #36]	; (80055f8 <siprintf+0x3c>)
 80055d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055d8:	9105      	str	r1, [sp, #20]
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	a902      	add	r1, sp, #8
 80055e0:	f000 f8f8 	bl	80057d4 <_svfiprintf_r>
 80055e4:	9b02      	ldr	r3, [sp, #8]
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	b01c      	add	sp, #112	; 0x70
 80055ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f0:	b003      	add	sp, #12
 80055f2:	4770      	bx	lr
 80055f4:	20000034 	.word	0x20000034
 80055f8:	ffff0208 	.word	0xffff0208

080055fc <strcpy>:
 80055fc:	4603      	mov	r3, r0
 80055fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005602:	f803 2b01 	strb.w	r2, [r3], #1
 8005606:	2a00      	cmp	r2, #0
 8005608:	d1f9      	bne.n	80055fe <strcpy+0x2>
 800560a:	4770      	bx	lr

0800560c <_strtoul_l.constprop.0>:
 800560c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005610:	4f36      	ldr	r7, [pc, #216]	; (80056ec <_strtoul_l.constprop.0+0xe0>)
 8005612:	4686      	mov	lr, r0
 8005614:	460d      	mov	r5, r1
 8005616:	4628      	mov	r0, r5
 8005618:	f815 4b01 	ldrb.w	r4, [r5], #1
 800561c:	5de6      	ldrb	r6, [r4, r7]
 800561e:	f016 0608 	ands.w	r6, r6, #8
 8005622:	d1f8      	bne.n	8005616 <_strtoul_l.constprop.0+0xa>
 8005624:	2c2d      	cmp	r4, #45	; 0x2d
 8005626:	d12f      	bne.n	8005688 <_strtoul_l.constprop.0+0x7c>
 8005628:	782c      	ldrb	r4, [r5, #0]
 800562a:	2601      	movs	r6, #1
 800562c:	1c85      	adds	r5, r0, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d057      	beq.n	80056e2 <_strtoul_l.constprop.0+0xd6>
 8005632:	2b10      	cmp	r3, #16
 8005634:	d109      	bne.n	800564a <_strtoul_l.constprop.0+0x3e>
 8005636:	2c30      	cmp	r4, #48	; 0x30
 8005638:	d107      	bne.n	800564a <_strtoul_l.constprop.0+0x3e>
 800563a:	7828      	ldrb	r0, [r5, #0]
 800563c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005640:	2858      	cmp	r0, #88	; 0x58
 8005642:	d149      	bne.n	80056d8 <_strtoul_l.constprop.0+0xcc>
 8005644:	786c      	ldrb	r4, [r5, #1]
 8005646:	2310      	movs	r3, #16
 8005648:	3502      	adds	r5, #2
 800564a:	f04f 38ff 	mov.w	r8, #4294967295
 800564e:	2700      	movs	r7, #0
 8005650:	fbb8 f8f3 	udiv	r8, r8, r3
 8005654:	fb03 f908 	mul.w	r9, r3, r8
 8005658:	ea6f 0909 	mvn.w	r9, r9
 800565c:	4638      	mov	r0, r7
 800565e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005662:	f1bc 0f09 	cmp.w	ip, #9
 8005666:	d814      	bhi.n	8005692 <_strtoul_l.constprop.0+0x86>
 8005668:	4664      	mov	r4, ip
 800566a:	42a3      	cmp	r3, r4
 800566c:	dd22      	ble.n	80056b4 <_strtoul_l.constprop.0+0xa8>
 800566e:	2f00      	cmp	r7, #0
 8005670:	db1d      	blt.n	80056ae <_strtoul_l.constprop.0+0xa2>
 8005672:	4580      	cmp	r8, r0
 8005674:	d31b      	bcc.n	80056ae <_strtoul_l.constprop.0+0xa2>
 8005676:	d101      	bne.n	800567c <_strtoul_l.constprop.0+0x70>
 8005678:	45a1      	cmp	r9, r4
 800567a:	db18      	blt.n	80056ae <_strtoul_l.constprop.0+0xa2>
 800567c:	fb00 4003 	mla	r0, r0, r3, r4
 8005680:	2701      	movs	r7, #1
 8005682:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005686:	e7ea      	b.n	800565e <_strtoul_l.constprop.0+0x52>
 8005688:	2c2b      	cmp	r4, #43	; 0x2b
 800568a:	bf04      	itt	eq
 800568c:	782c      	ldrbeq	r4, [r5, #0]
 800568e:	1c85      	addeq	r5, r0, #2
 8005690:	e7cd      	b.n	800562e <_strtoul_l.constprop.0+0x22>
 8005692:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005696:	f1bc 0f19 	cmp.w	ip, #25
 800569a:	d801      	bhi.n	80056a0 <_strtoul_l.constprop.0+0x94>
 800569c:	3c37      	subs	r4, #55	; 0x37
 800569e:	e7e4      	b.n	800566a <_strtoul_l.constprop.0+0x5e>
 80056a0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80056a4:	f1bc 0f19 	cmp.w	ip, #25
 80056a8:	d804      	bhi.n	80056b4 <_strtoul_l.constprop.0+0xa8>
 80056aa:	3c57      	subs	r4, #87	; 0x57
 80056ac:	e7dd      	b.n	800566a <_strtoul_l.constprop.0+0x5e>
 80056ae:	f04f 37ff 	mov.w	r7, #4294967295
 80056b2:	e7e6      	b.n	8005682 <_strtoul_l.constprop.0+0x76>
 80056b4:	2f00      	cmp	r7, #0
 80056b6:	da07      	bge.n	80056c8 <_strtoul_l.constprop.0+0xbc>
 80056b8:	2322      	movs	r3, #34	; 0x22
 80056ba:	f8ce 3000 	str.w	r3, [lr]
 80056be:	f04f 30ff 	mov.w	r0, #4294967295
 80056c2:	b932      	cbnz	r2, 80056d2 <_strtoul_l.constprop.0+0xc6>
 80056c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056c8:	b106      	cbz	r6, 80056cc <_strtoul_l.constprop.0+0xc0>
 80056ca:	4240      	negs	r0, r0
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	d0f9      	beq.n	80056c4 <_strtoul_l.constprop.0+0xb8>
 80056d0:	b107      	cbz	r7, 80056d4 <_strtoul_l.constprop.0+0xc8>
 80056d2:	1e69      	subs	r1, r5, #1
 80056d4:	6011      	str	r1, [r2, #0]
 80056d6:	e7f5      	b.n	80056c4 <_strtoul_l.constprop.0+0xb8>
 80056d8:	2430      	movs	r4, #48	; 0x30
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1b5      	bne.n	800564a <_strtoul_l.constprop.0+0x3e>
 80056de:	2308      	movs	r3, #8
 80056e0:	e7b3      	b.n	800564a <_strtoul_l.constprop.0+0x3e>
 80056e2:	2c30      	cmp	r4, #48	; 0x30
 80056e4:	d0a9      	beq.n	800563a <_strtoul_l.constprop.0+0x2e>
 80056e6:	230a      	movs	r3, #10
 80056e8:	e7af      	b.n	800564a <_strtoul_l.constprop.0+0x3e>
 80056ea:	bf00      	nop
 80056ec:	08006031 	.word	0x08006031

080056f0 <strtoul>:
 80056f0:	4613      	mov	r3, r2
 80056f2:	460a      	mov	r2, r1
 80056f4:	4601      	mov	r1, r0
 80056f6:	4802      	ldr	r0, [pc, #8]	; (8005700 <strtoul+0x10>)
 80056f8:	6800      	ldr	r0, [r0, #0]
 80056fa:	f7ff bf87 	b.w	800560c <_strtoul_l.constprop.0>
 80056fe:	bf00      	nop
 8005700:	20000034 	.word	0x20000034

08005704 <__malloc_lock>:
 8005704:	4801      	ldr	r0, [pc, #4]	; (800570c <__malloc_lock+0x8>)
 8005706:	f000 baf9 	b.w	8005cfc <__retarget_lock_acquire_recursive>
 800570a:	bf00      	nop
 800570c:	20000468 	.word	0x20000468

08005710 <__malloc_unlock>:
 8005710:	4801      	ldr	r0, [pc, #4]	; (8005718 <__malloc_unlock+0x8>)
 8005712:	f000 baf4 	b.w	8005cfe <__retarget_lock_release_recursive>
 8005716:	bf00      	nop
 8005718:	20000468 	.word	0x20000468

0800571c <__ssputs_r>:
 800571c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	688e      	ldr	r6, [r1, #8]
 8005722:	429e      	cmp	r6, r3
 8005724:	4682      	mov	sl, r0
 8005726:	460c      	mov	r4, r1
 8005728:	4690      	mov	r8, r2
 800572a:	461f      	mov	r7, r3
 800572c:	d838      	bhi.n	80057a0 <__ssputs_r+0x84>
 800572e:	898a      	ldrh	r2, [r1, #12]
 8005730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005734:	d032      	beq.n	800579c <__ssputs_r+0x80>
 8005736:	6825      	ldr	r5, [r4, #0]
 8005738:	6909      	ldr	r1, [r1, #16]
 800573a:	eba5 0901 	sub.w	r9, r5, r1
 800573e:	6965      	ldr	r5, [r4, #20]
 8005740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005748:	3301      	adds	r3, #1
 800574a:	444b      	add	r3, r9
 800574c:	106d      	asrs	r5, r5, #1
 800574e:	429d      	cmp	r5, r3
 8005750:	bf38      	it	cc
 8005752:	461d      	movcc	r5, r3
 8005754:	0553      	lsls	r3, r2, #21
 8005756:	d531      	bpl.n	80057bc <__ssputs_r+0xa0>
 8005758:	4629      	mov	r1, r5
 800575a:	f7ff feab 	bl	80054b4 <_malloc_r>
 800575e:	4606      	mov	r6, r0
 8005760:	b950      	cbnz	r0, 8005778 <__ssputs_r+0x5c>
 8005762:	230c      	movs	r3, #12
 8005764:	f8ca 3000 	str.w	r3, [sl]
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005778:	6921      	ldr	r1, [r4, #16]
 800577a:	464a      	mov	r2, r9
 800577c:	f000 fac0 	bl	8005d00 <memcpy>
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	81a3      	strh	r3, [r4, #12]
 800578c:	6126      	str	r6, [r4, #16]
 800578e:	6165      	str	r5, [r4, #20]
 8005790:	444e      	add	r6, r9
 8005792:	eba5 0509 	sub.w	r5, r5, r9
 8005796:	6026      	str	r6, [r4, #0]
 8005798:	60a5      	str	r5, [r4, #8]
 800579a:	463e      	mov	r6, r7
 800579c:	42be      	cmp	r6, r7
 800579e:	d900      	bls.n	80057a2 <__ssputs_r+0x86>
 80057a0:	463e      	mov	r6, r7
 80057a2:	6820      	ldr	r0, [r4, #0]
 80057a4:	4632      	mov	r2, r6
 80057a6:	4641      	mov	r1, r8
 80057a8:	f000 fab8 	bl	8005d1c <memmove>
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	1b9b      	subs	r3, r3, r6
 80057b0:	60a3      	str	r3, [r4, #8]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	4433      	add	r3, r6
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	2000      	movs	r0, #0
 80057ba:	e7db      	b.n	8005774 <__ssputs_r+0x58>
 80057bc:	462a      	mov	r2, r5
 80057be:	f000 fac7 	bl	8005d50 <_realloc_r>
 80057c2:	4606      	mov	r6, r0
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d1e1      	bne.n	800578c <__ssputs_r+0x70>
 80057c8:	6921      	ldr	r1, [r4, #16]
 80057ca:	4650      	mov	r0, sl
 80057cc:	f7ff fe06 	bl	80053dc <_free_r>
 80057d0:	e7c7      	b.n	8005762 <__ssputs_r+0x46>
	...

080057d4 <_svfiprintf_r>:
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	4698      	mov	r8, r3
 80057da:	898b      	ldrh	r3, [r1, #12]
 80057dc:	061b      	lsls	r3, r3, #24
 80057de:	b09d      	sub	sp, #116	; 0x74
 80057e0:	4607      	mov	r7, r0
 80057e2:	460d      	mov	r5, r1
 80057e4:	4614      	mov	r4, r2
 80057e6:	d50e      	bpl.n	8005806 <_svfiprintf_r+0x32>
 80057e8:	690b      	ldr	r3, [r1, #16]
 80057ea:	b963      	cbnz	r3, 8005806 <_svfiprintf_r+0x32>
 80057ec:	2140      	movs	r1, #64	; 0x40
 80057ee:	f7ff fe61 	bl	80054b4 <_malloc_r>
 80057f2:	6028      	str	r0, [r5, #0]
 80057f4:	6128      	str	r0, [r5, #16]
 80057f6:	b920      	cbnz	r0, 8005802 <_svfiprintf_r+0x2e>
 80057f8:	230c      	movs	r3, #12
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	e0d1      	b.n	80059a6 <_svfiprintf_r+0x1d2>
 8005802:	2340      	movs	r3, #64	; 0x40
 8005804:	616b      	str	r3, [r5, #20]
 8005806:	2300      	movs	r3, #0
 8005808:	9309      	str	r3, [sp, #36]	; 0x24
 800580a:	2320      	movs	r3, #32
 800580c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005810:	f8cd 800c 	str.w	r8, [sp, #12]
 8005814:	2330      	movs	r3, #48	; 0x30
 8005816:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059c0 <_svfiprintf_r+0x1ec>
 800581a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800581e:	f04f 0901 	mov.w	r9, #1
 8005822:	4623      	mov	r3, r4
 8005824:	469a      	mov	sl, r3
 8005826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800582a:	b10a      	cbz	r2, 8005830 <_svfiprintf_r+0x5c>
 800582c:	2a25      	cmp	r2, #37	; 0x25
 800582e:	d1f9      	bne.n	8005824 <_svfiprintf_r+0x50>
 8005830:	ebba 0b04 	subs.w	fp, sl, r4
 8005834:	d00b      	beq.n	800584e <_svfiprintf_r+0x7a>
 8005836:	465b      	mov	r3, fp
 8005838:	4622      	mov	r2, r4
 800583a:	4629      	mov	r1, r5
 800583c:	4638      	mov	r0, r7
 800583e:	f7ff ff6d 	bl	800571c <__ssputs_r>
 8005842:	3001      	adds	r0, #1
 8005844:	f000 80aa 	beq.w	800599c <_svfiprintf_r+0x1c8>
 8005848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800584a:	445a      	add	r2, fp
 800584c:	9209      	str	r2, [sp, #36]	; 0x24
 800584e:	f89a 3000 	ldrb.w	r3, [sl]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80a2 	beq.w	800599c <_svfiprintf_r+0x1c8>
 8005858:	2300      	movs	r3, #0
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005862:	f10a 0a01 	add.w	sl, sl, #1
 8005866:	9304      	str	r3, [sp, #16]
 8005868:	9307      	str	r3, [sp, #28]
 800586a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800586e:	931a      	str	r3, [sp, #104]	; 0x68
 8005870:	4654      	mov	r4, sl
 8005872:	2205      	movs	r2, #5
 8005874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005878:	4851      	ldr	r0, [pc, #324]	; (80059c0 <_svfiprintf_r+0x1ec>)
 800587a:	f7fa fcd1 	bl	8000220 <memchr>
 800587e:	9a04      	ldr	r2, [sp, #16]
 8005880:	b9d8      	cbnz	r0, 80058ba <_svfiprintf_r+0xe6>
 8005882:	06d0      	lsls	r0, r2, #27
 8005884:	bf44      	itt	mi
 8005886:	2320      	movmi	r3, #32
 8005888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800588c:	0711      	lsls	r1, r2, #28
 800588e:	bf44      	itt	mi
 8005890:	232b      	movmi	r3, #43	; 0x2b
 8005892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005896:	f89a 3000 	ldrb.w	r3, [sl]
 800589a:	2b2a      	cmp	r3, #42	; 0x2a
 800589c:	d015      	beq.n	80058ca <_svfiprintf_r+0xf6>
 800589e:	9a07      	ldr	r2, [sp, #28]
 80058a0:	4654      	mov	r4, sl
 80058a2:	2000      	movs	r0, #0
 80058a4:	f04f 0c0a 	mov.w	ip, #10
 80058a8:	4621      	mov	r1, r4
 80058aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ae:	3b30      	subs	r3, #48	; 0x30
 80058b0:	2b09      	cmp	r3, #9
 80058b2:	d94e      	bls.n	8005952 <_svfiprintf_r+0x17e>
 80058b4:	b1b0      	cbz	r0, 80058e4 <_svfiprintf_r+0x110>
 80058b6:	9207      	str	r2, [sp, #28]
 80058b8:	e014      	b.n	80058e4 <_svfiprintf_r+0x110>
 80058ba:	eba0 0308 	sub.w	r3, r0, r8
 80058be:	fa09 f303 	lsl.w	r3, r9, r3
 80058c2:	4313      	orrs	r3, r2
 80058c4:	9304      	str	r3, [sp, #16]
 80058c6:	46a2      	mov	sl, r4
 80058c8:	e7d2      	b.n	8005870 <_svfiprintf_r+0x9c>
 80058ca:	9b03      	ldr	r3, [sp, #12]
 80058cc:	1d19      	adds	r1, r3, #4
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	9103      	str	r1, [sp, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bfbb      	ittet	lt
 80058d6:	425b      	neglt	r3, r3
 80058d8:	f042 0202 	orrlt.w	r2, r2, #2
 80058dc:	9307      	strge	r3, [sp, #28]
 80058de:	9307      	strlt	r3, [sp, #28]
 80058e0:	bfb8      	it	lt
 80058e2:	9204      	strlt	r2, [sp, #16]
 80058e4:	7823      	ldrb	r3, [r4, #0]
 80058e6:	2b2e      	cmp	r3, #46	; 0x2e
 80058e8:	d10c      	bne.n	8005904 <_svfiprintf_r+0x130>
 80058ea:	7863      	ldrb	r3, [r4, #1]
 80058ec:	2b2a      	cmp	r3, #42	; 0x2a
 80058ee:	d135      	bne.n	800595c <_svfiprintf_r+0x188>
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	1d1a      	adds	r2, r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	9203      	str	r2, [sp, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfb8      	it	lt
 80058fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005900:	3402      	adds	r4, #2
 8005902:	9305      	str	r3, [sp, #20]
 8005904:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059d0 <_svfiprintf_r+0x1fc>
 8005908:	7821      	ldrb	r1, [r4, #0]
 800590a:	2203      	movs	r2, #3
 800590c:	4650      	mov	r0, sl
 800590e:	f7fa fc87 	bl	8000220 <memchr>
 8005912:	b140      	cbz	r0, 8005926 <_svfiprintf_r+0x152>
 8005914:	2340      	movs	r3, #64	; 0x40
 8005916:	eba0 000a 	sub.w	r0, r0, sl
 800591a:	fa03 f000 	lsl.w	r0, r3, r0
 800591e:	9b04      	ldr	r3, [sp, #16]
 8005920:	4303      	orrs	r3, r0
 8005922:	3401      	adds	r4, #1
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592a:	4826      	ldr	r0, [pc, #152]	; (80059c4 <_svfiprintf_r+0x1f0>)
 800592c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005930:	2206      	movs	r2, #6
 8005932:	f7fa fc75 	bl	8000220 <memchr>
 8005936:	2800      	cmp	r0, #0
 8005938:	d038      	beq.n	80059ac <_svfiprintf_r+0x1d8>
 800593a:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <_svfiprintf_r+0x1f4>)
 800593c:	bb1b      	cbnz	r3, 8005986 <_svfiprintf_r+0x1b2>
 800593e:	9b03      	ldr	r3, [sp, #12]
 8005940:	3307      	adds	r3, #7
 8005942:	f023 0307 	bic.w	r3, r3, #7
 8005946:	3308      	adds	r3, #8
 8005948:	9303      	str	r3, [sp, #12]
 800594a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594c:	4433      	add	r3, r6
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	e767      	b.n	8005822 <_svfiprintf_r+0x4e>
 8005952:	fb0c 3202 	mla	r2, ip, r2, r3
 8005956:	460c      	mov	r4, r1
 8005958:	2001      	movs	r0, #1
 800595a:	e7a5      	b.n	80058a8 <_svfiprintf_r+0xd4>
 800595c:	2300      	movs	r3, #0
 800595e:	3401      	adds	r4, #1
 8005960:	9305      	str	r3, [sp, #20]
 8005962:	4619      	mov	r1, r3
 8005964:	f04f 0c0a 	mov.w	ip, #10
 8005968:	4620      	mov	r0, r4
 800596a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800596e:	3a30      	subs	r2, #48	; 0x30
 8005970:	2a09      	cmp	r2, #9
 8005972:	d903      	bls.n	800597c <_svfiprintf_r+0x1a8>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0c5      	beq.n	8005904 <_svfiprintf_r+0x130>
 8005978:	9105      	str	r1, [sp, #20]
 800597a:	e7c3      	b.n	8005904 <_svfiprintf_r+0x130>
 800597c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005980:	4604      	mov	r4, r0
 8005982:	2301      	movs	r3, #1
 8005984:	e7f0      	b.n	8005968 <_svfiprintf_r+0x194>
 8005986:	ab03      	add	r3, sp, #12
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	462a      	mov	r2, r5
 800598c:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <_svfiprintf_r+0x1f8>)
 800598e:	a904      	add	r1, sp, #16
 8005990:	4638      	mov	r0, r7
 8005992:	f3af 8000 	nop.w
 8005996:	1c42      	adds	r2, r0, #1
 8005998:	4606      	mov	r6, r0
 800599a:	d1d6      	bne.n	800594a <_svfiprintf_r+0x176>
 800599c:	89ab      	ldrh	r3, [r5, #12]
 800599e:	065b      	lsls	r3, r3, #25
 80059a0:	f53f af2c 	bmi.w	80057fc <_svfiprintf_r+0x28>
 80059a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a6:	b01d      	add	sp, #116	; 0x74
 80059a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ac:	ab03      	add	r3, sp, #12
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <_svfiprintf_r+0x1f8>)
 80059b4:	a904      	add	r1, sp, #16
 80059b6:	4638      	mov	r0, r7
 80059b8:	f000 f87a 	bl	8005ab0 <_printf_i>
 80059bc:	e7eb      	b.n	8005996 <_svfiprintf_r+0x1c2>
 80059be:	bf00      	nop
 80059c0:	08006131 	.word	0x08006131
 80059c4:	0800613b 	.word	0x0800613b
 80059c8:	00000000 	.word	0x00000000
 80059cc:	0800571d 	.word	0x0800571d
 80059d0:	08006137 	.word	0x08006137

080059d4 <_printf_common>:
 80059d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	4616      	mov	r6, r2
 80059da:	4699      	mov	r9, r3
 80059dc:	688a      	ldr	r2, [r1, #8]
 80059de:	690b      	ldr	r3, [r1, #16]
 80059e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	bfb8      	it	lt
 80059e8:	4613      	movlt	r3, r2
 80059ea:	6033      	str	r3, [r6, #0]
 80059ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059f0:	4607      	mov	r7, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	b10a      	cbz	r2, 80059fa <_printf_common+0x26>
 80059f6:	3301      	adds	r3, #1
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	0699      	lsls	r1, r3, #26
 80059fe:	bf42      	ittt	mi
 8005a00:	6833      	ldrmi	r3, [r6, #0]
 8005a02:	3302      	addmi	r3, #2
 8005a04:	6033      	strmi	r3, [r6, #0]
 8005a06:	6825      	ldr	r5, [r4, #0]
 8005a08:	f015 0506 	ands.w	r5, r5, #6
 8005a0c:	d106      	bne.n	8005a1c <_printf_common+0x48>
 8005a0e:	f104 0a19 	add.w	sl, r4, #25
 8005a12:	68e3      	ldr	r3, [r4, #12]
 8005a14:	6832      	ldr	r2, [r6, #0]
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	42ab      	cmp	r3, r5
 8005a1a:	dc26      	bgt.n	8005a6a <_printf_common+0x96>
 8005a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a20:	1e13      	subs	r3, r2, #0
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	bf18      	it	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	0692      	lsls	r2, r2, #26
 8005a2a:	d42b      	bmi.n	8005a84 <_printf_common+0xb0>
 8005a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a30:	4649      	mov	r1, r9
 8005a32:	4638      	mov	r0, r7
 8005a34:	47c0      	blx	r8
 8005a36:	3001      	adds	r0, #1
 8005a38:	d01e      	beq.n	8005a78 <_printf_common+0xa4>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	68e5      	ldr	r5, [r4, #12]
 8005a3e:	6832      	ldr	r2, [r6, #0]
 8005a40:	f003 0306 	and.w	r3, r3, #6
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	bf08      	it	eq
 8005a48:	1aad      	subeq	r5, r5, r2
 8005a4a:	68a3      	ldr	r3, [r4, #8]
 8005a4c:	6922      	ldr	r2, [r4, #16]
 8005a4e:	bf0c      	ite	eq
 8005a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a54:	2500      	movne	r5, #0
 8005a56:	4293      	cmp	r3, r2
 8005a58:	bfc4      	itt	gt
 8005a5a:	1a9b      	subgt	r3, r3, r2
 8005a5c:	18ed      	addgt	r5, r5, r3
 8005a5e:	2600      	movs	r6, #0
 8005a60:	341a      	adds	r4, #26
 8005a62:	42b5      	cmp	r5, r6
 8005a64:	d11a      	bne.n	8005a9c <_printf_common+0xc8>
 8005a66:	2000      	movs	r0, #0
 8005a68:	e008      	b.n	8005a7c <_printf_common+0xa8>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4652      	mov	r2, sl
 8005a6e:	4649      	mov	r1, r9
 8005a70:	4638      	mov	r0, r7
 8005a72:	47c0      	blx	r8
 8005a74:	3001      	adds	r0, #1
 8005a76:	d103      	bne.n	8005a80 <_printf_common+0xac>
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a80:	3501      	adds	r5, #1
 8005a82:	e7c6      	b.n	8005a12 <_printf_common+0x3e>
 8005a84:	18e1      	adds	r1, r4, r3
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	2030      	movs	r0, #48	; 0x30
 8005a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a8e:	4422      	add	r2, r4
 8005a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a98:	3302      	adds	r3, #2
 8005a9a:	e7c7      	b.n	8005a2c <_printf_common+0x58>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	47c0      	blx	r8
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d0e6      	beq.n	8005a78 <_printf_common+0xa4>
 8005aaa:	3601      	adds	r6, #1
 8005aac:	e7d9      	b.n	8005a62 <_printf_common+0x8e>
	...

08005ab0 <_printf_i>:
 8005ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	7e0f      	ldrb	r7, [r1, #24]
 8005ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ab8:	2f78      	cmp	r7, #120	; 0x78
 8005aba:	4691      	mov	r9, r2
 8005abc:	4680      	mov	r8, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	469a      	mov	sl, r3
 8005ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ac6:	d807      	bhi.n	8005ad8 <_printf_i+0x28>
 8005ac8:	2f62      	cmp	r7, #98	; 0x62
 8005aca:	d80a      	bhi.n	8005ae2 <_printf_i+0x32>
 8005acc:	2f00      	cmp	r7, #0
 8005ace:	f000 80d8 	beq.w	8005c82 <_printf_i+0x1d2>
 8005ad2:	2f58      	cmp	r7, #88	; 0x58
 8005ad4:	f000 80a3 	beq.w	8005c1e <_printf_i+0x16e>
 8005ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ae0:	e03a      	b.n	8005b58 <_printf_i+0xa8>
 8005ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ae6:	2b15      	cmp	r3, #21
 8005ae8:	d8f6      	bhi.n	8005ad8 <_printf_i+0x28>
 8005aea:	a101      	add	r1, pc, #4	; (adr r1, 8005af0 <_printf_i+0x40>)
 8005aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005af0:	08005b49 	.word	0x08005b49
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005ad9 	.word	0x08005ad9
 8005afc:	08005ad9 	.word	0x08005ad9
 8005b00:	08005ad9 	.word	0x08005ad9
 8005b04:	08005ad9 	.word	0x08005ad9
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005ad9 	.word	0x08005ad9
 8005b10:	08005ad9 	.word	0x08005ad9
 8005b14:	08005ad9 	.word	0x08005ad9
 8005b18:	08005ad9 	.word	0x08005ad9
 8005b1c:	08005c69 	.word	0x08005c69
 8005b20:	08005b8d 	.word	0x08005b8d
 8005b24:	08005c4b 	.word	0x08005c4b
 8005b28:	08005ad9 	.word	0x08005ad9
 8005b2c:	08005ad9 	.word	0x08005ad9
 8005b30:	08005c8b 	.word	0x08005c8b
 8005b34:	08005ad9 	.word	0x08005ad9
 8005b38:	08005b8d 	.word	0x08005b8d
 8005b3c:	08005ad9 	.word	0x08005ad9
 8005b40:	08005ad9 	.word	0x08005ad9
 8005b44:	08005c53 	.word	0x08005c53
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	1d1a      	adds	r2, r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	602a      	str	r2, [r5, #0]
 8005b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0a3      	b.n	8005ca4 <_printf_i+0x1f4>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	6829      	ldr	r1, [r5, #0]
 8005b60:	0606      	lsls	r6, r0, #24
 8005b62:	f101 0304 	add.w	r3, r1, #4
 8005b66:	d50a      	bpl.n	8005b7e <_printf_i+0xce>
 8005b68:	680e      	ldr	r6, [r1, #0]
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	2e00      	cmp	r6, #0
 8005b6e:	da03      	bge.n	8005b78 <_printf_i+0xc8>
 8005b70:	232d      	movs	r3, #45	; 0x2d
 8005b72:	4276      	negs	r6, r6
 8005b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b78:	485e      	ldr	r0, [pc, #376]	; (8005cf4 <_printf_i+0x244>)
 8005b7a:	230a      	movs	r3, #10
 8005b7c:	e019      	b.n	8005bb2 <_printf_i+0x102>
 8005b7e:	680e      	ldr	r6, [r1, #0]
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b86:	bf18      	it	ne
 8005b88:	b236      	sxthne	r6, r6
 8005b8a:	e7ef      	b.n	8005b6c <_printf_i+0xbc>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	1d19      	adds	r1, r3, #4
 8005b92:	6029      	str	r1, [r5, #0]
 8005b94:	0601      	lsls	r1, r0, #24
 8005b96:	d501      	bpl.n	8005b9c <_printf_i+0xec>
 8005b98:	681e      	ldr	r6, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <_printf_i+0xf2>
 8005b9c:	0646      	lsls	r6, r0, #25
 8005b9e:	d5fb      	bpl.n	8005b98 <_printf_i+0xe8>
 8005ba0:	881e      	ldrh	r6, [r3, #0]
 8005ba2:	4854      	ldr	r0, [pc, #336]	; (8005cf4 <_printf_i+0x244>)
 8005ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ba6:	bf0c      	ite	eq
 8005ba8:	2308      	moveq	r3, #8
 8005baa:	230a      	movne	r3, #10
 8005bac:	2100      	movs	r1, #0
 8005bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bb2:	6865      	ldr	r5, [r4, #4]
 8005bb4:	60a5      	str	r5, [r4, #8]
 8005bb6:	2d00      	cmp	r5, #0
 8005bb8:	bfa2      	ittt	ge
 8005bba:	6821      	ldrge	r1, [r4, #0]
 8005bbc:	f021 0104 	bicge.w	r1, r1, #4
 8005bc0:	6021      	strge	r1, [r4, #0]
 8005bc2:	b90e      	cbnz	r6, 8005bc8 <_printf_i+0x118>
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	d04d      	beq.n	8005c64 <_printf_i+0x1b4>
 8005bc8:	4615      	mov	r5, r2
 8005bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bce:	fb03 6711 	mls	r7, r3, r1, r6
 8005bd2:	5dc7      	ldrb	r7, [r0, r7]
 8005bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bd8:	4637      	mov	r7, r6
 8005bda:	42bb      	cmp	r3, r7
 8005bdc:	460e      	mov	r6, r1
 8005bde:	d9f4      	bls.n	8005bca <_printf_i+0x11a>
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d10b      	bne.n	8005bfc <_printf_i+0x14c>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	07de      	lsls	r6, r3, #31
 8005be8:	d508      	bpl.n	8005bfc <_printf_i+0x14c>
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	6861      	ldr	r1, [r4, #4]
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	bfde      	ittt	le
 8005bf2:	2330      	movle	r3, #48	; 0x30
 8005bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bfc:	1b52      	subs	r2, r2, r5
 8005bfe:	6122      	str	r2, [r4, #16]
 8005c00:	f8cd a000 	str.w	sl, [sp]
 8005c04:	464b      	mov	r3, r9
 8005c06:	aa03      	add	r2, sp, #12
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	f7ff fee2 	bl	80059d4 <_printf_common>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d14c      	bne.n	8005cae <_printf_i+0x1fe>
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295
 8005c18:	b004      	add	sp, #16
 8005c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1e:	4835      	ldr	r0, [pc, #212]	; (8005cf4 <_printf_i+0x244>)
 8005c20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c24:	6829      	ldr	r1, [r5, #0]
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c2c:	6029      	str	r1, [r5, #0]
 8005c2e:	061d      	lsls	r5, r3, #24
 8005c30:	d514      	bpl.n	8005c5c <_printf_i+0x1ac>
 8005c32:	07df      	lsls	r7, r3, #31
 8005c34:	bf44      	itt	mi
 8005c36:	f043 0320 	orrmi.w	r3, r3, #32
 8005c3a:	6023      	strmi	r3, [r4, #0]
 8005c3c:	b91e      	cbnz	r6, 8005c46 <_printf_i+0x196>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	f023 0320 	bic.w	r3, r3, #32
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	2310      	movs	r3, #16
 8005c48:	e7b0      	b.n	8005bac <_printf_i+0xfc>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	f043 0320 	orr.w	r3, r3, #32
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	2378      	movs	r3, #120	; 0x78
 8005c54:	4828      	ldr	r0, [pc, #160]	; (8005cf8 <_printf_i+0x248>)
 8005c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c5a:	e7e3      	b.n	8005c24 <_printf_i+0x174>
 8005c5c:	0659      	lsls	r1, r3, #25
 8005c5e:	bf48      	it	mi
 8005c60:	b2b6      	uxthmi	r6, r6
 8005c62:	e7e6      	b.n	8005c32 <_printf_i+0x182>
 8005c64:	4615      	mov	r5, r2
 8005c66:	e7bb      	b.n	8005be0 <_printf_i+0x130>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	6826      	ldr	r6, [r4, #0]
 8005c6c:	6961      	ldr	r1, [r4, #20]
 8005c6e:	1d18      	adds	r0, r3, #4
 8005c70:	6028      	str	r0, [r5, #0]
 8005c72:	0635      	lsls	r5, r6, #24
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0x1cc>
 8005c78:	6019      	str	r1, [r3, #0]
 8005c7a:	e002      	b.n	8005c82 <_printf_i+0x1d2>
 8005c7c:	0670      	lsls	r0, r6, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0x1c8>
 8005c80:	8019      	strh	r1, [r3, #0]
 8005c82:	2300      	movs	r3, #0
 8005c84:	6123      	str	r3, [r4, #16]
 8005c86:	4615      	mov	r5, r2
 8005c88:	e7ba      	b.n	8005c00 <_printf_i+0x150>
 8005c8a:	682b      	ldr	r3, [r5, #0]
 8005c8c:	1d1a      	adds	r2, r3, #4
 8005c8e:	602a      	str	r2, [r5, #0]
 8005c90:	681d      	ldr	r5, [r3, #0]
 8005c92:	6862      	ldr	r2, [r4, #4]
 8005c94:	2100      	movs	r1, #0
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7fa fac2 	bl	8000220 <memchr>
 8005c9c:	b108      	cbz	r0, 8005ca2 <_printf_i+0x1f2>
 8005c9e:	1b40      	subs	r0, r0, r5
 8005ca0:	6060      	str	r0, [r4, #4]
 8005ca2:	6863      	ldr	r3, [r4, #4]
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cac:	e7a8      	b.n	8005c00 <_printf_i+0x150>
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	462a      	mov	r2, r5
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	47d0      	blx	sl
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d0ab      	beq.n	8005c14 <_printf_i+0x164>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	079b      	lsls	r3, r3, #30
 8005cc0:	d413      	bmi.n	8005cea <_printf_i+0x23a>
 8005cc2:	68e0      	ldr	r0, [r4, #12]
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	4298      	cmp	r0, r3
 8005cc8:	bfb8      	it	lt
 8005cca:	4618      	movlt	r0, r3
 8005ccc:	e7a4      	b.n	8005c18 <_printf_i+0x168>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	47d0      	blx	sl
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d09b      	beq.n	8005c14 <_printf_i+0x164>
 8005cdc:	3501      	adds	r5, #1
 8005cde:	68e3      	ldr	r3, [r4, #12]
 8005ce0:	9903      	ldr	r1, [sp, #12]
 8005ce2:	1a5b      	subs	r3, r3, r1
 8005ce4:	42ab      	cmp	r3, r5
 8005ce6:	dcf2      	bgt.n	8005cce <_printf_i+0x21e>
 8005ce8:	e7eb      	b.n	8005cc2 <_printf_i+0x212>
 8005cea:	2500      	movs	r5, #0
 8005cec:	f104 0619 	add.w	r6, r4, #25
 8005cf0:	e7f5      	b.n	8005cde <_printf_i+0x22e>
 8005cf2:	bf00      	nop
 8005cf4:	08006142 	.word	0x08006142
 8005cf8:	08006153 	.word	0x08006153

08005cfc <__retarget_lock_acquire_recursive>:
 8005cfc:	4770      	bx	lr

08005cfe <__retarget_lock_release_recursive>:
 8005cfe:	4770      	bx	lr

08005d00 <memcpy>:
 8005d00:	440a      	add	r2, r1
 8005d02:	4291      	cmp	r1, r2
 8005d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d08:	d100      	bne.n	8005d0c <memcpy+0xc>
 8005d0a:	4770      	bx	lr
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d16:	4291      	cmp	r1, r2
 8005d18:	d1f9      	bne.n	8005d0e <memcpy+0xe>
 8005d1a:	bd10      	pop	{r4, pc}

08005d1c <memmove>:
 8005d1c:	4288      	cmp	r0, r1
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	eb01 0402 	add.w	r4, r1, r2
 8005d24:	d902      	bls.n	8005d2c <memmove+0x10>
 8005d26:	4284      	cmp	r4, r0
 8005d28:	4623      	mov	r3, r4
 8005d2a:	d807      	bhi.n	8005d3c <memmove+0x20>
 8005d2c:	1e43      	subs	r3, r0, #1
 8005d2e:	42a1      	cmp	r1, r4
 8005d30:	d008      	beq.n	8005d44 <memmove+0x28>
 8005d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d3a:	e7f8      	b.n	8005d2e <memmove+0x12>
 8005d3c:	4402      	add	r2, r0
 8005d3e:	4601      	mov	r1, r0
 8005d40:	428a      	cmp	r2, r1
 8005d42:	d100      	bne.n	8005d46 <memmove+0x2a>
 8005d44:	bd10      	pop	{r4, pc}
 8005d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d4e:	e7f7      	b.n	8005d40 <memmove+0x24>

08005d50 <_realloc_r>:
 8005d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d54:	4680      	mov	r8, r0
 8005d56:	4614      	mov	r4, r2
 8005d58:	460e      	mov	r6, r1
 8005d5a:	b921      	cbnz	r1, 8005d66 <_realloc_r+0x16>
 8005d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d60:	4611      	mov	r1, r2
 8005d62:	f7ff bba7 	b.w	80054b4 <_malloc_r>
 8005d66:	b92a      	cbnz	r2, 8005d74 <_realloc_r+0x24>
 8005d68:	f7ff fb38 	bl	80053dc <_free_r>
 8005d6c:	4625      	mov	r5, r4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d74:	f000 f81b 	bl	8005dae <_malloc_usable_size_r>
 8005d78:	4284      	cmp	r4, r0
 8005d7a:	4607      	mov	r7, r0
 8005d7c:	d802      	bhi.n	8005d84 <_realloc_r+0x34>
 8005d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d82:	d812      	bhi.n	8005daa <_realloc_r+0x5a>
 8005d84:	4621      	mov	r1, r4
 8005d86:	4640      	mov	r0, r8
 8005d88:	f7ff fb94 	bl	80054b4 <_malloc_r>
 8005d8c:	4605      	mov	r5, r0
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d0ed      	beq.n	8005d6e <_realloc_r+0x1e>
 8005d92:	42bc      	cmp	r4, r7
 8005d94:	4622      	mov	r2, r4
 8005d96:	4631      	mov	r1, r6
 8005d98:	bf28      	it	cs
 8005d9a:	463a      	movcs	r2, r7
 8005d9c:	f7ff ffb0 	bl	8005d00 <memcpy>
 8005da0:	4631      	mov	r1, r6
 8005da2:	4640      	mov	r0, r8
 8005da4:	f7ff fb1a 	bl	80053dc <_free_r>
 8005da8:	e7e1      	b.n	8005d6e <_realloc_r+0x1e>
 8005daa:	4635      	mov	r5, r6
 8005dac:	e7df      	b.n	8005d6e <_realloc_r+0x1e>

08005dae <_malloc_usable_size_r>:
 8005dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db2:	1f18      	subs	r0, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bfbc      	itt	lt
 8005db8:	580b      	ldrlt	r3, [r1, r0]
 8005dba:	18c0      	addlt	r0, r0, r3
 8005dbc:	4770      	bx	lr
	...

08005dc0 <_init>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	bf00      	nop
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr

08005dcc <_fini>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr
